size = "Counts") +
custom_theme +
theme(axis.text.y = element_text(size = y_text_size)) +
coord_cartesian(clip = "off") +
scale_x_continuous(limits = x_limits, expand = expansion(mult = c(0, 0.05))) +
scale_alpha_continuous(range = c(0.5, 1)) +
scale_color_manual(values = plot_colors) +
scale_fill_manual(values = plot_colors) + # need for coloring the legend
guides(fill = guide_legend(override.aes = list(shape = 22, size = 6)),
color = guide_legend(override.aes = list(shape = 22, size = 6)),
alpha = guide_legend(override.aes = list(shape = 15, size = 6))) +
ggplot2::scale_size(breaks = breaks)
dot_plot_list <- c(dot_plot_list, list(p2))
}
bar_plots <- cowplot::plot_grid(plotlist = bar_plots, ncol = 3, nrow = 3)
ggplot2::ggsave(filename = paste0("Bar_plot_pathways_", method, ".tiff"),
plot = bar_plots,
device = "jpeg",
path = file.path(save.dir),
width = 3*7,
height = 3*7,
units = "in",
dpi = 300,
bg = "white")
dot_plots <- cowplot::plot_grid(plotlist = dot_plot_list, ncol = 3, nrow = 3)
ggplot2::ggsave(filename = paste0("Dot_plot_pathways_", method, ".tiff"),
plot = dot_plots,
device = "jpeg",
path = file.path(save.dir),
width = 3*7,
height = 3*7,
units = "in",
dpi = 300,
bg = "white")
}
# ---- Pathway plots ----
top_pathways_gsea <- gsea_res_list$consensus %>%
dplyr::group_by(Collection, Consensus, Description) %>%
dplyr::slice_min(order_by = match(method, c("FGSEA", "GSEA", "ORA")), n = 1) %>%
dplyr::ungroup() %>%
dplyr::group_by(Collection, Consensus) %>%
dplyr::slice_max(order_by = abs(NES), n = 10, with_ties = FALSE) %>%
dplyr::ungroup()
top_pathways_ora <- gsea_res_list$consensus %>%
dplyr::filter(method == "ORA") %>%
dplyr::group_by(Collection, Consensus) %>%
dplyr::slice_min(order_by = padj, n = 10, with_ties = FALSE) %>%
dplyr::ungroup()
plot_pathways(top_pathways_gsea, "GSEA", save.dir)
save.dir <- proj.dir
# ---- Pathway plots ----
top_pathways_gsea <- gsea_res_list$consensus %>%
dplyr::group_by(Collection, Consensus, Description) %>%
dplyr::slice_min(order_by = match(method, c("FGSEA", "GSEA", "ORA")), n = 1) %>%
dplyr::ungroup() %>%
dplyr::group_by(Collection, Consensus) %>%
dplyr::slice_max(order_by = abs(NES), n = 10, with_ties = FALSE) %>%
dplyr::ungroup()
top_pathways_ora <- gsea_res_list$consensus %>%
dplyr::filter(method == "ORA") %>%
dplyr::group_by(Collection, Consensus) %>%
dplyr::slice_min(order_by = padj, n = 10, with_ties = FALSE) %>%
dplyr::ungroup()
plot_pathways(top_pathways_gsea, "GSEA", save.dir)
plot_pathways(top_pathways_ora, "ORA", save.dir)
df <- top_pathways_gsea
df <- df %>%
dplyr::mutate(Description = gsub(pattern = "_", replacement = " ", x = Description),
Description = stringr::str_wrap(string = Description, width = 30))
# Decide if there are multiple collections or single collection.
# If multiple, plot each collection separately,
collections <- unique(df$Collection)
n_collections <- length(unique(df$Collection))
collections
i <- 5
plot_df <- df %>% dplyr::filter(Collection %in% collections[i])
plot_df
method
method <- "GSEA"
if (method == "ORA"){
x_col <- sym("GeneRatio")
x_label <- "GeneRatio"
size_col <- sym("leading_edge_size")
color_col <- sym("Direction")
score_var <- dplyr::case_when("GeneRatio" %in% colnames(df) ~ "GeneRatio",
"combined_score" %in% colnames(df) ~ "combined_score",
TRUE ~ NA_character_)
x_limits <- c(0, NA)  # start at 0, auto end
df <- df %>%
dplyr::filter(!is.na(.data[[score_var]])) %>%
dplyr::arrange(dplyr::desc(.data[[score_var]]))
} else if (method == "GSEA"){
x_col <- sym("NES")
x_label <- "Normalized Enrichment Score (NES)"
size_col <- sym("leading_edge_size")
color_col <- sym("Direction")
score_var <- "NES"
x_limits <- c(floor(min(plot_df$NES, na.rm = TRUE)), NA)
}
# Pad with empty rows if fewer than 15 pathways
n_missing <- 20 - nrow(plot_df)
if(n_missing > 0){
empty_df <- matrix(data = "",
nrow = n_missing,
ncol = ncol(plot_df)) %>%
as.data.frame() %>%
dplyr::mutate(Description = paste0("", seq_len(n_missing)))
plot_df <- dplyr::bind_rows(plot_df, empty_df)
}
max_label_len <- max(nchar(plot_df$Description), na.rm = TRUE)
y_text_size <- dplyr::case_when(max_label_len > 50 ~ 6,
max_label_len > 35 ~ 7,
max_label_len > 25 ~ 8,
TRUE ~ 10)
plot_df
x_limits
plot_df$NES
min(plot_df$NES, na.rm = TRUE))
min(plot_df$NES, na.rm = TRUE)
c(floor(min(plot_df$NES, na.rm = TRUE)), NA)
-log10(plot_df$padj)
x_min <- ifelse(floor(min(plot_df$NES, na.rm = TRUE)) > 0, 0, floor(min(plot_df$NES, na.rm = TRUE)))
x_limits <- c(x_min, NA)
x_limits
plot_pathways <- function(df, method, save.dir){
dot_plot_list <- list()
bar_plots <- list()
plot_colors <- c("Upregulated" = "#E69F00", "Downregulated" = "#56B4E9")
# str_wrap() wraps only between words, and it defines "words" based on spaces (" ").
# If all words are connected by "_", it wont split.
df <- df %>%
dplyr::mutate(Description = gsub(pattern = "_", replacement = " ", x = Description),
Description = stringr::str_wrap(string = Description, width = 30))
# Decide if there are multiple collections or single collection.
# If multiple, plot each collection separately,
collections <- unique(df$Collection)
n_collections <- length(unique(df$Collection))
for (i in seq_len(n_collections)){
plot_df <- df %>% dplyr::filter(Collection %in% collections[i])
# Choose x axis column, size column and labels
if (method == "ORA"){
x_col <- sym("GeneRatio")
x_label <- "GeneRatio"
size_col <- sym("leading_edge_size")
color_col <- sym("Direction")
score_var <- dplyr::case_when("GeneRatio" %in% colnames(df) ~ "GeneRatio",
"combined_score" %in% colnames(df) ~ "combined_score",
TRUE ~ NA_character_)
x_limits <- c(0, NA)  # start at 0, auto end
df <- df %>%
dplyr::filter(!is.na(.data[[score_var]])) %>%
dplyr::arrange(dplyr::desc(.data[[score_var]]))
} else if (method == "GSEA"){
x_col <- sym("NES")
x_label <- "Normalized Enrichment Score (NES)"
size_col <- sym("leading_edge_size")
color_col <- sym("Direction")
score_var <- "NES"
x_min <- ifelse(floor(min(plot_df$NES, na.rm = TRUE)) > 0, 0, floor(min(plot_df$NES, na.rm = TRUE)))
x_limits <- c(x_min, NA)
}
# Pad with empty rows if fewer than 15 pathways
n_missing <- 20 - nrow(plot_df)
if(n_missing > 0){
empty_df <- matrix(data = "",
nrow = n_missing,
ncol = ncol(plot_df)) %>%
as.data.frame() %>%
dplyr::mutate(Description = paste0("", seq_len(n_missing)))
plot_df <- dplyr::bind_rows(plot_df, empty_df)
}
max_label_len <- max(nchar(plot_df$Description), na.rm = TRUE)
y_text_size <- dplyr::case_when(max_label_len > 50 ~ 6,
max_label_len > 35 ~ 7,
max_label_len > 25 ~ 8,
TRUE ~ 10)
# Plot bar plot
p1 <- ggplot2::ggplot(data = plot_df,
aes(x = !!x_col,
y = reorder(Description, !!x_col),
fill = !!color_col,
alpha = -log10(padj))) +
ggplot2::geom_col(width = 0.75, na.rm = TRUE) +
ggplot2::theme_classic() +
ggplot2::labs(x = x_label,
y = "",
title = paste("Top", collections[i], "Pathways"),
fill = "Direction") +
custom_theme +
theme(axis.text.y = element_text(size = y_text_size)) +
coord_cartesian(clip = "off") +
scale_x_continuous(limits = x_limits, expand = expansion(mult = c(0, 0.05))) +
scale_alpha_continuous(range = c(0.5, 1)) +
scale_fill_manual(values = plot_colors) +
guides(fill = guide_legend(override.aes = list(shape = 22, size = 6)),
color = guide_legend(override.aes = list(shape = 22, size = 6)),
alpha = guide_legend(override.aes = list(shape = 22, size = 6))) +
ggplot2::geom_text(aes(label =  !!size_col), x = 0, hjust = -0.1, size = 3, show.legend = FALSE)
bar_plots <- c(bar_plots, list(p1))
# Plot dot plot
vals <- c(min(plot_df[[size_col]], na.rm = TRUE), max(plot_df[[size_col]], na.rm = TRUE))
breaks <- as.vector(floor(quantile(vals) / 10) * 10)
p2 <- ggplot2::ggplot(data = plot_df,
aes(x = !!x_col,
y = reorder(Description, !!x_col),
fill = !!color_col,
alpha = -log10(padj),
color = !!color_col,
size = !!size_col)) +
ggplot2::geom_point() +
ggplot2::theme_classic() +
ggplot2::labs(x = x_label ,
y = "",
title = paste("Top", collections[i], "Pathways"),
color = "Direction",
size = "Counts") +
custom_theme +
theme(axis.text.y = element_text(size = y_text_size)) +
coord_cartesian(clip = "off") +
scale_x_continuous(limits = x_limits, expand = expansion(mult = c(0, 0.05))) +
scale_alpha_continuous(range = c(0.5, 1)) +
scale_color_manual(values = plot_colors) +
scale_fill_manual(values = plot_colors) + # need for coloring the legend
guides(fill = guide_legend(override.aes = list(shape = 22, size = 6)),
color = guide_legend(override.aes = list(shape = 22, size = 6)),
alpha = guide_legend(override.aes = list(shape = 15, size = 6))) +
ggplot2::scale_size(breaks = breaks)
dot_plot_list <- c(dot_plot_list, list(p2))
}
bar_plots <- cowplot::plot_grid(plotlist = bar_plots, ncol = 3, nrow = 3)
ggplot2::ggsave(filename = paste0("Bar_plot_pathways_", method, ".tiff"),
plot = bar_plots,
device = "jpeg",
path = file.path(save.dir),
width = 3*7,
height = 3*7,
units = "in",
dpi = 300,
bg = "white")
dot_plots <- cowplot::plot_grid(plotlist = dot_plot_list, ncol = 3, nrow = 3)
ggplot2::ggsave(filename = paste0("Dot_plot_pathways_", method, ".tiff"),
plot = dot_plots,
device = "jpeg",
path = file.path(save.dir),
width = 3*7,
height = 3*7,
units = "in",
dpi = 300,
bg = "white")
}
plot_pathways(top_pathways_gsea, "GSEA", save.dir)
plot_pathways(top_pathways_ora, "ORA", save.dir)
# ---- Pathway heatmaps ----
top_pathways <- dplyr::bind_rows(top_pathways_gsea, top_pathways_ora) %>%
dplyr::mutate(Pathway_name = stringr::str_wrap(paste0(Collection, ":", Description), width = 30))
collections <- unique(top_pathways$Collection)
for (col_name in collections) {
top_pathways_collection <- top_pathways %>% dplyr::filter(Collection == col_name)
plot_names <- unique(top_pathways_collection$Pathway_name)
all_plots <- list()
for (plot_name in plot_names) {
plot_genes <- top_pathways_collection %>%
dplyr::filter(Pathway_name == plot_name) %>%
dplyr::select(dplyr::starts_with("gene", ignore.case = FALSE)) %>%
unlist(use.names = FALSE) %>%
trimws() %>%
na.omit() %>%
unique()
norm_counts <- vst_counts[plot_genes, samples, drop = FALSE]
metadata_col <- meta_data %>% dplyr::filter(Sample.ID %in% samples)
proj.params$heatmap.title <- stringr::str_wrap(string = plot_name, width = 30)
ph <- plot_heatmap(norm_counts, proj.params, metadata_col)
all_plots[[length(all_plots) + 1]] <- trim_heatmap_whitespace(ph$ph$gtable)
}
jpeg(file.path(save_dir, paste0("Heatmap_", col_name, ".jpeg")),
width = 7 * length(all_plots),
height = 10, units = "in", res = 300)
gridExtra::grid.arrange(grobs = all_plots, ncol = length(all_plots))
dev.off()
}
# ---- Perform TF analysis on DEGs using t-statistics ----
t_stats_mat <- DEGs_df %>%
as.data.frame() %>%
dplyr::mutate(t = -log10(padj) * -log2FoldChange) %>%
dplyr::filter(!is.na(t)) %>%
dplyr::select(SYMBOL, t) %>%
tibble::column_to_rownames("SYMBOL") %>%
as.matrix()
tf_res_degs <- tf_analysis(t_stats_mat, proj.params$species)
t_stats_mat
sum(is.na(t_stats_mat))
DEGs_df <- data %>%
dplyr::rename(SYMBOL = gene, padj = adjp_forVolPlot, log2FoldChange = avg_log2FC)
t_stats_mat <- DEGs_df %>%
as.data.frame() %>%
dplyr::mutate(t = -log10(padj) * -log2FoldChange) %>%
dplyr::filter(!is.na(t)) %>%
dplyr::select(SYMBOL, t) %>%
tibble::column_to_rownames("SYMBOL") %>%
as.matrix()
tf_res_degs <- tf_analysis(t_stats_mat, proj.params$species)
# ---- Plot barplots of top TFs from DEGs ----
# NOTE: wsum returns wsum, norm_wsum and corr_wsum.
# wsum (DONT USE): Biased toward larger gene sets (more genes → bigger sum)
# norm_wsum (USE): Adjusts for pathway length so small and large gene sets are comparable
# corr_sum (USE): corrects for high correlation as it can make enrichment appear stronger
stats_degs <- unique(tf_res_degs$all_tfs$statistic)
bar_plots <- list()
# Extract treatment and control from current contrast string
contrast_split <- stringr::str_split(string = contrast[n], pattern = "-")[[1]]
# Extract treatment and control from current contrast string
contrast_split <- stringr::str_split(string = "LM-Rest", pattern = "-")[[1]]
treatment <- contrast_split[1]
control <- contrast_split[2]
for (stat in stats_degs) {
n_tfs <- 20
top_tf <- tf_res_degs$all_tfs %>%
dplyr::mutate(Direction = dplyr::case_when(score < 0 ~ "Downregulated",
score > 0 ~ "Upregulated",
TRUE ~ "No change")) %>%
dplyr::group_by(statistic, Direction) %>%
dplyr::slice_max(order_by = abs(score), n = n_tfs, with_ties = FALSE) %>%
dplyr::ungroup() %>%
dplyr::filter(statistic == stat)
p1 <- ggplot(data = top_tf, aes(x = reorder(source, score), y = score, fill = score)) +
geom_col(width = 0.75, na.rm = TRUE) +
scale_fill_gradient2(low = "darkblue", high = "indianred", mid = "whitesmoke", midpoint = 0) +
labs(x = "", y = "Score", title = paste0("Top TFs (", stat, " method)"), fill = "Score") +
custom_theme +
coord_cartesian(clip = "off") +
geom_text(label = paste0("Activated in ", treatment),
x = top_tf$source[which.max(top_tf$score)],
y = ceiling(max(top_tf$score)) + 1, hjust = 1, color = "indianred", fontface = "bold") +
geom_text(label = paste0("Activated in ", control),
x = top_tf$source[which.min(top_tf$score)],
y = ceiling(max(top_tf$score)) + 1, hjust = 0, color = "darkblue", fontface = "bold")
bar_plots <- c(bar_plots, list(p1))
}
# Save combined barplots
bar_plots_combined <- cowplot::plot_grid(plotlist = bar_plots, ncol = 1, nrow = 6)
ggsave(filename = file.path(save.dir, "Bar_plot_TFs.jpeg"),
plot = bar_plots_combined,
device = "jpeg",
width = 10,
height = 6 * 3,
units = "in",
dpi = 300,
bg = "white")
data <- read.xlsx(file.path(proj.dir, "DEGs_LMvsOthers_PO1.xlsx")
)
data <- read.xlsx(file.path(proj.dir, "DEGs_LMvsOthers_PO1.xlsx"), sheet= "DEGs_LMvsOthers_PO1ALL")
DEGs_df <- data %>%
dplyr::rename(SYMBOL = gene, padj = adjp_forVolPlot, log2FoldChange = avg_log2FC)
gmt_files <- list.files(file.path(gmt.dir, proj.params$species), full.names = TRUE)
gsea_res_list <- pathway_analysis(DEGs_df, gmt_files)
wb <- openxlsx::createWorkbook()
for (i in seq_along(gsea_res_list)) {
openxlsx::addWorksheet(wb, sheetName = names(gsea_res_list)[i])
openxlsx::writeData(wb, sheet = names(gsea_res_list)[i], x = gsea_res_list[[i]], rowNames = FALSE)
}
openxlsx::saveWorkbook(wb, file.path(save.dir, "Pathway_results.xlsx"), overwrite = TRUE)
# ---- Pathway plots ----
top_pathways_gsea <- gsea_res_list$consensus %>%
dplyr::group_by(Collection, Consensus, Description) %>%
dplyr::slice_min(order_by = match(method, c("FGSEA", "GSEA", "ORA")), n = 1) %>%
dplyr::ungroup() %>%
dplyr::group_by(Collection, Consensus) %>%
dplyr::slice_max(order_by = abs(NES), n = 10, with_ties = FALSE) %>%
dplyr::ungroup()
top_pathways_ora <- gsea_res_list$consensus %>%
dplyr::filter(method == "ORA") %>%
dplyr::group_by(Collection, Consensus) %>%
dplyr::slice_min(order_by = padj, n = 10, with_ties = FALSE) %>%
dplyr::ungroup()
plot_pathways(top_pathways_gsea, "GSEA", save.dir)
plot_pathways(top_pathways_ora, "ORA", save.dir)
# ---- Perform TF analysis on DEGs using t-statistics ----
t_stats_mat <- DEGs_df %>%
as.data.frame() %>%
dplyr::mutate(t = -log10(padj) * -log2FoldChange) %>%
dplyr::filter(!is.na(t)) %>%
dplyr::select(SYMBOL, t) %>%
tibble::column_to_rownames("SYMBOL") %>%
as.matrix()
tf_res_degs <- tf_analysis(t_stats_mat, proj.params$species)
# ---- Plot barplots of top TFs from DEGs ----
# NOTE: wsum returns wsum, norm_wsum and corr_wsum.
# wsum (DONT USE): Biased toward larger gene sets (more genes → bigger sum)
# norm_wsum (USE): Adjusts for pathway length so small and large gene sets are comparable
# corr_sum (USE): corrects for high correlation as it can make enrichment appear stronger
stats_degs <- unique(tf_res_degs$all_tfs$statistic)
bar_plots <- list()
# Extract treatment and control from current contrast string
contrast_split <- stringr::str_split(string = "LM-Rest", pattern = "-")[[1]]
treatment <- contrast_split[1]
control <- contrast_split[2]
for (stat in stats_degs) {
n_tfs <- 20
top_tf <- tf_res_degs$all_tfs %>%
dplyr::mutate(Direction = dplyr::case_when(score < 0 ~ "Downregulated",
score > 0 ~ "Upregulated",
TRUE ~ "No change")) %>%
dplyr::group_by(statistic, Direction) %>%
dplyr::slice_max(order_by = abs(score), n = n_tfs, with_ties = FALSE) %>%
dplyr::ungroup() %>%
dplyr::filter(statistic == stat)
p1 <- ggplot(data = top_tf, aes(x = reorder(source, score), y = score, fill = score)) +
geom_col(width = 0.75, na.rm = TRUE) +
scale_fill_gradient2(low = "darkblue", high = "indianred", mid = "whitesmoke", midpoint = 0) +
labs(x = "", y = "Score", title = paste0("Top TFs (", stat, " method)"), fill = "Score") +
custom_theme +
coord_cartesian(clip = "off") +
geom_text(label = paste0("Activated in ", treatment),
x = top_tf$source[which.max(top_tf$score)],
y = ceiling(max(top_tf$score)) + 1, hjust = 1, color = "indianred", fontface = "bold") +
geom_text(label = paste0("Activated in ", control),
x = top_tf$source[which.min(top_tf$score)],
y = ceiling(max(top_tf$score)) + 1, hjust = 0, color = "darkblue", fontface = "bold")
bar_plots <- c(bar_plots, list(p1))
}
# Save combined barplots
bar_plots_combined <- cowplot::plot_grid(plotlist = bar_plots, ncol = 1, nrow = 6)
ggsave(filename = file.path(save.dir, "Bar_plot_TFs.jpeg"),
plot = bar_plots_combined,
device = "jpeg",
width = 10,
height = 6 * 3,
units = "in",
dpi = 300,
bg = "white")
data <- read.xlsx(file.path(proj.dir, "DEGs_LMvsOthers_PO1.xlsx")
)
DEGs_df <- data %>%
dplyr::rename(SYMBOL = gene, padj = adjp_forVolPlot, log2FoldChange = avg_log2FC)
gmt_files <- list.files(file.path(gmt.dir, proj.params$species), full.names = TRUE)
gsea_res_list <- pathway_analysis(DEGs_df, gmt_files)
wb <- openxlsx::createWorkbook()
for (i in seq_along(gsea_res_list)) {
openxlsx::addWorksheet(wb, sheetName = names(gsea_res_list)[i])
openxlsx::writeData(wb, sheet = names(gsea_res_list)[i], x = gsea_res_list[[i]], rowNames = FALSE)
}
openxlsx::saveWorkbook(wb, file.path(save.dir, "Pathway_results.xlsx"), overwrite = TRUE)
# ---- Pathway plots ----
top_pathways_gsea <- gsea_res_list$consensus %>%
dplyr::group_by(Collection, Consensus, Description) %>%
dplyr::slice_min(order_by = match(method, c("FGSEA", "GSEA", "ORA")), n = 1) %>%
dplyr::ungroup() %>%
dplyr::group_by(Collection, Consensus) %>%
dplyr::slice_max(order_by = abs(NES), n = 10, with_ties = FALSE) %>%
dplyr::ungroup()
top_pathways_ora <- gsea_res_list$consensus %>%
dplyr::filter(method == "ORA") %>%
dplyr::group_by(Collection, Consensus) %>%
dplyr::slice_min(order_by = padj, n = 10, with_ties = FALSE) %>%
dplyr::ungroup()
plot_pathways(top_pathways_gsea, "GSEA", save.dir)
plot_pathways(top_pathways_ora, "ORA", save.dir)
# ---- Perform TF analysis on DEGs using t-statistics ----
t_stats_mat <- DEGs_df %>%
as.data.frame() %>%
dplyr::mutate(t = -log10(padj) * -log2FoldChange) %>%
dplyr::filter(!is.na(t)) %>%
dplyr::select(SYMBOL, t) %>%
tibble::column_to_rownames("SYMBOL") %>%
as.matrix()
tf_res_degs <- tf_analysis(t_stats_mat, proj.params$species)
# ---- Plot barplots of top TFs from DEGs ----
# NOTE: wsum returns wsum, norm_wsum and corr_wsum.
# wsum (DONT USE): Biased toward larger gene sets (more genes → bigger sum)
# norm_wsum (USE): Adjusts for pathway length so small and large gene sets are comparable
# corr_sum (USE): corrects for high correlation as it can make enrichment appear stronger
stats_degs <- unique(tf_res_degs$all_tfs$statistic)
bar_plots <- list()
# Extract treatment and control from current contrast string
contrast_split <- stringr::str_split(string = "LM-Rest", pattern = "-")[[1]]
treatment <- contrast_split[1]
control <- contrast_split[2]
for (stat in stats_degs) {
n_tfs <- 20
top_tf <- tf_res_degs$all_tfs %>%
dplyr::mutate(Direction = dplyr::case_when(score < 0 ~ "Downregulated",
score > 0 ~ "Upregulated",
TRUE ~ "No change")) %>%
dplyr::group_by(statistic, Direction) %>%
dplyr::slice_max(order_by = abs(score), n = n_tfs, with_ties = FALSE) %>%
dplyr::ungroup() %>%
dplyr::filter(statistic == stat)
p1 <- ggplot(data = top_tf, aes(x = reorder(source, score), y = score, fill = score)) +
geom_col(width = 0.75, na.rm = TRUE) +
scale_fill_gradient2(low = "darkblue", high = "indianred", mid = "whitesmoke", midpoint = 0) +
labs(x = "", y = "Score", title = paste0("Top TFs (", stat, " method)"), fill = "Score") +
custom_theme +
coord_cartesian(clip = "off") +
geom_text(label = paste0("Activated in ", treatment),
x = top_tf$source[which.max(top_tf$score)],
y = ceiling(max(top_tf$score)) + 1, hjust = 1, color = "indianred", fontface = "bold") +
geom_text(label = paste0("Activated in ", control),
x = top_tf$source[which.min(top_tf$score)],
y = ceiling(max(top_tf$score)) + 1, hjust = 0, color = "darkblue", fontface = "bold")
bar_plots <- c(bar_plots, list(p1))
}
# Save combined barplots
bar_plots_combined <- cowplot::plot_grid(plotlist = bar_plots, ncol = 1, nrow = 6)
ggsave(filename = file.path(save.dir, "Bar_plot_TFs.jpeg"),
plot = bar_plots_combined,
device = "jpeg",
width = 10,
height = 6 * 3,
units = "in",
dpi = 300,
bg = "white")
View(data)
