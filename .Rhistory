# in "rowMeans(dat) > 1". As a result, the number of genes in normalized counts
# excel file is lower than DeSeq2.
svaseq_norm_counts <- function(dds, annotations, approach){
dat  <- DESeq2::counts(dds, normalized = TRUE)
idx  <- rowMeans(dat) > 1
dat  <- dat[idx, ]
mod  <- stats::model.matrix(~ id, colData(dds))
mod0 <- stats::model.matrix(~ 1, colData(dds))
svseq <- sva::svaseq(dat=dat, mod=mod, mod0=mod0)
if (svseq$n.sv > 2){
svseq <- sva::svaseq(dat=dat, mod=mod, mod0=mod0, n.sv=2)
}
# %*% indicates Matrix multiplication
X <- base::cbind(mod, svseq$sv)
Hat <- base::solve(t(X) %*% X) %*% t(X)
beta <- (Hat %*% t(dat))
P <- ncol(mod)
corrected_data <- dat - t(as.matrix(X[,-c(1:P)]) %*% beta[-c(1:P),])
normalized_counts <- corrected_data %>%
as.data.frame() %>%
tibble::rownames_to_column("ID")
normalized_counts <- add_annotation(normalized_counts, annotations)
# Save batch corrected normalized counts for entire dataset
wb <- openxlsx::createWorkbook()
openxlsx::addWorksheet(wb, sheetName="normalized")
openxlsx::writeData(wb, sheet="normalized", x=normalized_counts)
openxlsx::saveWorkbook(wb, file=paste0(results_path, "Normalized_Counts_", approach, ".xlsx"),
overwrite=TRUE)
}
#****************************************************************************#
#                             STEP 6: RUN DESEQ2                             #
#****************************************************************************#
# This function runs DESeq2 and plots volcano plot, heatmap, PCA plot and
# correlation plot.
run_deseq2 <- function(dds, meta_data, annotations, Comparisons, n, lfc.cutoff, padj.cutoff, approach){
# Run analysis using both local and parameteric fit
# betaPrior: default=FALSE, shrunken LFCs are obtained later using lfcShrink
# fitType: "local" may be better sometimes
dds_para <- DESeq2::DESeq(object=dds,
test="Wald",
fitType="parametric",
betaPrior=FALSE,
minReplicatesForReplace=7)
dds_local <- DESeq2::DESeq(object=dds,
test="Wald",
fitType="local",
betaPrior=FALSE,
minReplicatesForReplace=7)
# Determine whether to use "local" or "parametric" fit
residual_para <- mcols(dds_para)$dispGeneEst - mcols(dds_para)$dispFit
residual_local <- mcols(dds_local)$dispGeneEst - mcols(dds_local)$dispFit
if (median(residual_para^2, na.rm=TRUE) <= median(residual_local^2, na.rm=TRUE)){
fit <- "parametric"
dds <- dds_para
} else{
fit <- "local"
dds <- dds_local
}
# Define contrast and coeff
DE_levels <- as.vector(unique(meta_data$id))
contrast <- c("id",
DE_levels[grepl(pattern=Comparisons$Target[n], x=DE_levels)],
DE_levels[grepl(pattern=Comparisons$Reference[n], x=DE_levels)])
coeff <- paste(contrast[1], contrast[2], "vs", contrast[3], sep='_')
cat("Coeff is ", coeff, "\n")
# Calculate results
res <- DESeq2::results(object=dds,
contrast=contrast,
lfcThreshold=lfc.cutoff,
altHypothesis="greaterAbs",
cooksCutoff=TRUE,
independentFiltering=TRUE,
alpha=padj.cutoff,
pAdjustMethod="BH")
# Perform lfcshrinkage to account for variability between replicates
# For ashr, if res is provided, then coef and contrast are ignored.
# lfcshrinkage will not change the number of DEGs and affects only logFC
res <- DESeq2::lfcShrink(dds=dds, res=res, type="ashr")
# Summarize results
summary(res)
# Export results as dataframe and replace ensembl IDs with Gene names
results <- res %>%
as.data.frame() %>%
tibble::rownames_to_column("ID")
ensembl <- length(intersect(results$ID, annotations$ENSEMBL_ID))
entrez <- length(intersect(results$ID, annotations$ENTREZ_ID))
symbol <- length(intersect(results$ID, annotations$SYMBOL))
if (ensembl > entrez & ensembl > symbol){
results <- annotations %>%
dplyr::right_join(results, by=c("ENSEMBL_ID"="ID"), multiple="all") %>%
dplyr::select(SYMBOL, CHR, everything(), -c(DESCRIPTION, START, END, STRAND, BIOTYPE, BIOTYPE_ENTREZ)) %>%
dplyr::mutate(SYMBOL=dplyr::case_when(is.na(SYMBOL) & !is.na(ENSEMBL_ID) ~ ENSEMBL_ID,
is.na(SYMBOL) & !is.na(ENTREZ_ID) ~ ENTREZ_ID,
TRUE ~ SYMBOL)) %>%
dplyr::distinct_at("ENSEMBL_ID", .keep_all=TRUE)
}
if (entrez > ensembl & entrez > symbol){
results <- annotations %>%
dplyr::right_join(results, by=c("ENTREZ_ID"="ID"), multiple="all") %>%
dplyr::select(SYMBOL, CHR, everything(), -c(DESCRIPTION, START, END, STRAND, BIOTYPE, BIOTYPE_ENTREZ)) %>%
dplyr::mutate(SYMBOL=dplyr::case_when(is.na(SYMBOL) & !is.na(ENSEMBL_ID) ~ ENSEMBL_ID,
is.na(SYMBOL) & !is.na(ENTREZ_ID) ~ ENTREZ_ID,
TRUE ~ SYMBOL)) %>%
dplyr::distinct_at("ENTREZ_ID", .keep_all=TRUE)
}
if (symbol > ensembl & symbol > entrez){
results <- annotations %>%
dplyr::right_join(results, by=c("SYMBOL"="ID"), multiple="all") %>%
dplyr::select(SYMBOL, CHR, everything(), -c(DESCRIPTION, START, END, STRAND, BIOTYPE, BIOTYPE_ENTREZ)) %>%
dplyr::mutate(SYMBOL=dplyr::case_when(is.na(SYMBOL) & !is.na(ENSEMBL_ID) ~ ENSEMBL_ID,
is.na(SYMBOL) & !is.na(ENTREZ_ID) ~ ENTREZ_ID,
TRUE ~ SYMBOL)) %>%
dplyr::distinct_at("SYMBOL", .keep_all=TRUE)
}
# Add unique identifier to each result file
file_prefix <- gsub(pattern="/", replacement="", x=coeff)
# Save the results
wb <- openxlsx::createWorkbook()
openxlsx::addWorksheet(wb, sheetName="DEGs")
openxlsx::writeData(wb, sheet="DEGs", x=results, rowNames=FALSE)
openxlsx::saveWorkbook(wb, file=paste0(results_path, "Results_", file_prefix, "_", approach, "_DEGs.xlsx"),
overwrite=TRUE)
return(dds)
#**************************************************************************#
#             CREATE HEATMAPS, VOLCANO PLOTS, PCA PLOTS            #
#**************************************************************************#
if (heatmap_plot == TRUE){
# Refer https://www.biostars.org/p/339065/ where the authors of DESeq2 recommend
# using vst or rld rather than log1p transformation while plotting DESeq2
# normalized counts in heatmap.
# NOTE: We scale the vst values and replace all NAs with 0 before feeding it to
# pheatmap(). If we perform the scaling in pheatmap, the NAs generated during
# scaling will give error.
# NOTE: While use of log1p transformation is NOT recommended, I notice only
# minor changes in color
# Define any filename you want added to final file
file_prefix <- paste0(Variable2_value, "_", coeff)
file_prefix <- gsub(pattern="/", replacement="", x=file_prefix)
file_prefix <- paste0(file_prefix, "_", f_suffix)
# (I) Read metadata
metadata <- meta_data %>%
tibble::rownames_to_column("Sample")
# (II) Define genes to plot
plot_genes <- results %>%
dplyr::filter(padj < 0.05) %>%
dplyr::select(SYMBOL) %>%
unlist(use.names=FALSE)
# (III) Genes to display in heatmap
disp_genes <- c()
# (IV) Read expr data
#normalized_counts <- normalized_counts
normalized_counts <- assay(DESeq2::vst(dds, blind=FALSE)) %>%
as.data.frame() %>%
tibble::rownames_to_column("ENSEMBL_ID") %>%
dplyr::left_join(annotations, by=c("ENSEMBL_ID"="ENSEMBL_ID"), multiple="all") %>%
dplyr::filter(nchar(SYMBOL) > 0) %>%
dplyr::select(SYMBOL, everything(), -c(ID, CHR, DESCRIPTION, START, END, STRAND))
colnames(normalized_counts)[1] <- "SYMBOL"
# Run the function
plot_heatmap(normalized_counts, metadata, plot_genes, disp_genes, file_prefix)
}
if (volcano_plot ==TRUE){
# Define any filename you want added to final file
file_prefix <- paste0(Variable2_value, "_", coeff)
file_prefix <- gsub(pattern="/", replacement="", x=file_prefix)
file_prefix <- paste0(file_prefix, "_", f_suffix)
# (I) Import expression data with log2FC and pval
volcano_df <- results %>%
dplyr::rename(log2FC=log2FoldChange, Gene=SYMBOL)
# (II) Define or import metadata
# NOTE: Metadata is a dataframe with "Sample" and "Condition" columns
metadata <- meta_data %>%
tibble::rownames_to_column("Sample")
# (III) Define any genes you want to mark in volcano plot
disp_genes <- c()
# Make volcano plots
plot_volcano(volcano_df, disp_genes, file_prefix)
}
if (cor_plot==TRUE){
#Determine number of cuts in heatmap
cuts <- 20
# Use vst as well as rld
vst <- DESeq2::vst(dds)
sig_genes <- results %>%
dplyr::filter(abs(log2FoldChange) >= 0.58 & padj < 0.05 & padj > 0 & !is.na(padj)) %>%
dplyr::select(SYMBOL) %>%
unlist(use.names=FALSE)
vst <- vst[rownames(vst) %in% sig_genes]
head(assay(vst))
sampleDists <- dist(assay(vst))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- dplyr::left_join(data.frame("ENSEMBL_ID"=rownames(sampleDistMatrix)), annotations, by=c("ENSEMBL_ID"="ENSEMBL_ID")) %>%
dplyr::select(SYMBOL) %>%
unlist(use.names=FALSE)
colnames(sampleDistMatrix) <- rownames(sampleDistMatrix)
# cluster and re-order rows
rowclust <- hclust(dist(sampleDistMatrix))
# cluster and re-order columns
colclust <- hclust(dist(t(sampleDistMatrix)))
reordered <- sampleDistMatrix[rowclust$order,colclust$order]
# Save batch corrected normalized counts for entire dataset
wb <- openxlsx::createWorkbook()
openxlsx::addWorksheet(wb, sheetName="Correlation")
openxlsx::writeData(wb, sheet="Correlation", x=reordered , rowNames=TRUE)
openxlsx::saveWorkbook(wb,
file=paste0(results_path, "Results_", Variable2_value, "_Correlation_Matrix.xlsx"),
overwrite=TRUE)
pheatmap::pheatmap(mat=reordered,
scale="none",
cellwidth=3,
cellheight=2,
cutree_rows=cuts,
cutree_cols=cuts,
cluster_rows=TRUE,   #cluster the rows
cluster_cols=TRUE,   #cluster the columns
fontsize=8,
fontsize_row=8,
fontsize_col=8,
show_rownames=FALSE,
show_colnames=FALSE,
angle_col=c("270", "0", "45", "90", "315"),
fontsize_number=0.8*fontsize,
width=40,
height=40,
filename=paste0(results_path, "Correlation_vst.jpg"))
}
}
#****************************************************************************#
#                          STEP 7: PREPARE QC PLOTS                          #
#****************************************************************************#
plot_qc <- function(dds, meta_data, approach){
#****************************************************************************#
#                                   PLOT PCA                                 #
#****************************************************************************#
# NOTE: DESeq2::vst() only needs DESeqDataSet or matrix of counts as input
# NOTE: DESeq2::plotDispEsts needs DeSeqDataSet with dispersion estimated.
# So, better to plot these qc plots after running DESeq2()
vst_mat <- DESeq2::vst(dds, blind=FALSE)
vst_mat <- SummarizedExperiment::assay(vst_mat)
# Calculate PCs
pca <- prcomp(t(vst_mat))
# Create data frame with metadata, PC1 & PC2 values for ggplot
df <- cbind(meta_data, pca$x)
ggplot(df, aes(x=PC1, y=PC2, color=id)) +
geom_point() +
geom_text_repel(label=rownames(df))
ggplot2::ggsave(filename=paste0("PCA_Plot_overall_", approach, ".jpg"),
plot=last_plot(),
device="jpeg",
path=results_path,
width=7,
height=7,
units=c("in"),
dpi=300,
limitsize=TRUE,
bg="white")
#****************************************************************************#
#                         PLOT DISPERSION ESTIMATES                          #
#****************************************************************************#
# Expected results: Higher the mean, lower the dispersion
# NOTE: The output of plotDispEsts() is not a ggplot2 object.
grDevices::jpeg(filename=paste0(results_path, "Dispersion_Plot_overall_", approach, ".jpg"),
width=8.5,
height=11,
units=c("in"),
quality=75,
bg="white",
res=300)
DESeq2::plotDispEsts(object=dds,
genecol="black",
fitcol="red",
finalcol="dodgerblue",
legend=TRUE,
xlab="Mean of Normalized counts",
ylab="Dispersion",
log="xy",
cex=0.45)
grDevices::dev.off()
}
source("C:/Users/kailasamms/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
proj <- "Boopati_MB49Y-_DDR2KO"
# Define Target and Reference base don project
if (proj == "TCGA"){
Variable <- "Sex"
Comparisons <- list(Target=c("Male"),
Reference=c("Female"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj == "IMVigor210"){
Variable <- "binaryResponse"
Comparisons <- list(Target=c("SD/PD"),
Reference=c("CR/PR"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj =="Mukta_GSE95097"){
Variable <- "Condition"
Comparisons <- list(Target=c("8hr", "4hr"),
Reference=c("0hr", "0hr"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj == "Boopati_MB49Y-_DDR2KO"){
Variable <- "Condition"
Comparisons <- list(Target=c("Ddr2KO"),
Reference=c("Control"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj == "Boopati_MB49Sigma_DDR2KD3"){
Variable <- "Condition"
Comparisons <- list(Target=c("Ddr2KD"),
Reference=c("Control"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj=="Mukta_NA13_MB49_CDH12OE"){
Variable <- "Condition"
Comparisons <- list(Target=c("OE"),
Reference=c("Control"))
Variable2 <- "Cell_line"
Variable2_value <- "NA13"  #MB49"
}
if (proj=="Hany_KO"){
Variable <- "Condition"
Comparisons <- list(Target=c("Kdm5d_KO", "Uty_KO"),
Reference=c("scr_KO", "scr_KO"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj=="Hany_YKO"){
Variable <- "Condition"
Comparisons <- list(Target=   c("YKO_centromere"),
Reference=c("scr_KO_centromere"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj=="Hany_Y"){
Variable <- "Condition"
Comparisons <- list(Target=c("Y_neg"),
Reference=c("Y_pos"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj=="Hany_Y_Tumor"){
Variable <- "Condition"
Comparisons <- list(Target=c("Y_pos_Tumor", "Hany_Tumor"),
Reference=c("Y_neg_Tumor", "Sigma_Tumor"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj=="Hany_OE"){
Variable <- "Condition"
Comparisons <- list(Target=c("Kdm5d_OE", "Uty_OE"),
Reference=c("scr_OE", "scr_OE"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj=="Hany_OE_Tumor"){
Variable <- "Condition"
Comparisons <- list(Target=c("Kdm5d_OE_Tumor", "Uty_OE_Tumor"),
Reference=c("scr_OE_Tumor", "scr_OE_Tumor"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj=="TRAMP_GSE79756"){
Variable <- "Condition"
Comparisons <- list(Target=c("PAX8-NFE2L2 fusion"),
Reference=c("Empty vector"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj=="TCGA"){
Variable <- "Condition"
Comparisons <- list(Target=c("Male"),
Reference=c("Female"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj=="Prince_DepMap"){
Variable <- "Condition"
Comparisons <- list(Target=c("Ypos", "Female"),
Reference=c("Yneg", "Yneg"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj=="scRNASeq_BBN_Nude"){
Variable <- "Sex"
Comparisons <- list(Target=c("Male"),
Reference=c("Female"))
Variable2 <- NULL
Variable2_value <- NULL
}
if (proj=="scRNASeq"){
Variable <- "Ystatus"
Comparisons <- list(Target=c("Yneg"),
Reference=c("Ypos"))
Variable2 <- "Condition"
Variable2_value <- "Tumor"
}
if (proj=="Jinfen_CRISPR"){
Variable <- "Condition"
Comparisons <- list(Target=c("Day7_2D", "Day14_2D", "Day7_3D", "Day14_3D"),
Reference=c("Day0_2D", "Day0_2D", "Day0_3D", "Day0_3D"))
Variable2 <- ""
Variable2_value <- ""
}
if (proj=="PRJNA587619"){
Variable <- "Condition"
Comparisons <- list(Target=c("BBN"),
Reference=c("Control"))
Variable2 <- ""
Variable2_value <- ""
}
if (proj=="GSE75192"){
Variable <- "Condition"
Comparisons <- list(Target=c("09m_Brain", "15m_Brain", "24m_Brain", "30m_Brain",
"09m_Liver", "15m_Liver", "24m_Liver", "30m_Liver",
"09m_Skin",  "15m_Skin",  "24m_Skin",  "30m_Skin",
"09m_Whole Blood", "15m_Whole Blood", "24m_Whole Blood", "30m_Whole Blood"),
Reference=c("02m_Brain", "02m_Brain", "02m_Brain", "02m_Brain",
"02m_Liver", "02m_Liver", "02m_Liver", "02m_Liver",
"02m_Skin",  "02m_Skin",  "02m_Skin", "02m_Skin",
"02m_Whole Blood", "02m_Whole Blood", "02m_Whole Blood","02m_Whole Blood"))
Variable2 <- ""
Variable2_value <- ""
}
if (proj=="EGAD00001007575"){
Variable <- "Sex"
Comparisons <- list(Target=c("Male"),
Reference=c("Female"))
Variable2 <- ""
Variable2_value <- ""
}
if (proj=="EGAD00001003977"){
Variable <- "Sex"
Comparisons <- list(Target=c("Male"),
Reference=c("Female"))
Variable2 <- ""
Variable2_value <- ""
}
parent_path <- paste0("C:/Users/KailasammS/Box/Saravana@cedars/05. Bioinformatics/RNASeq/", proj, "/")
results_path <- parent_path
# Choose if data is from human or mice. We will adjust gene names accordingly.
species <- "Homo sapiens"
species <- "Mus musculus"
# Define method used for calculating counts.
# NOTE: A folder named "count_results" containing all the count.txt files
# generated by STAR or HTSEQ MUST be present in parent_path
method <- "HTSEQ"
method <- "STAR"
# Define DESeq2 thresholds
padj.cutoff <- 0.1
lfc.cutoff <- 0     # 0.58 for more strict analysis
# Indicate if you want to plot heatmap, volcano plot, PCA plot
heatmap_plot <- FALSE
volcano_plot <- FALSE
cor_plot  <- FALSE
# read_data MUST be xlsx file
# read_data MUST have "SYMBOL" column with gene names without any duplication
read_data <- openxlsx::read.xlsx(xlsxFile=paste0(parent_path, "Read_data.xlsx"))
# meta_data MUST be xlsx file
# meta_data MUST have "Sample" column with sample names without any duplication
# meta_data MUST have "Batch" column with batch info
# Example: If samples were isolated on different days & prepared using different
# kits, "Batch" column must have values like "1_Ribo", "1_Poly-A", "2_Ribo", etc
# NOTE: Make sure there are no white spaces in the Target and Reference columns
# in excel file. R will change any white space (" ") to dot ("."). So, replace
# white space (" ") with underscore ("_") before importing into R.
meta_data <- openxlsx::read.xlsx(xlsxFile=paste0(parent_path, "Meta_data.xlsx"))
annotations <- get_annotations(species)
#read_data <- compile_raw_counts(parent_path, method)
meta_data <- prep_metadata(meta_data, Variable)
read_data <- prep_readdata(read_data, meta_data)
l <- check_data(read_data, meta_data)
meta_data <- l[[2]]
read_data <- l[[1]]
combat_corrected_read_data <- combatseq_batch(read_data, meta_data)
sva_dds <- svaseq_batch(read_data, meta_data)
for (n in 1:length(Comparisons$Target)){
# Perform DESeq2() using in-built batch modelling
approach <- "DESeq2_modelled"
if (length(unique(meta_data$Batch)) > 1){
dds <- DESeq2::DESeqDataSetFromMatrix(countData=read_data,
colData=meta_data,
design=~ Batch+id)
} else {
dds <- DESeq2::DESeqDataSetFromMatrix(countData=read_data,
colData=meta_data,
design=~ id)
}
dds <- run_deseq2(dds, meta_data, annotations, Comparisons, n, lfc.cutoff, padj.cutoff, approach)
deseq2_norm_counts(dds, annotations, approach) # batch corrected if you more than 1 batch
plot_qc(dds, meta_data, approach)
# Perform DESeq2() using combat corrected read counts
if (!identical(read_data, combat_corrected_read_data)){
approach <- "combat_corrected"
combat_dds <- DESeq2::DESeqDataSetFromMatrix(countData=combat_corrected_read_data,
colData=meta_data,
design=~ id)
combat_dds <- run_deseq2(combat_dds, meta_data, annotations, Comparisons, n, lfc.cutoff, padj.cutoff)
combatseq_norm_counts(combat_dds, annotations, approach)  #combat batch corrected
plot_qc(combat_dds, meta_data, approach)
}
# Perform DESeq2() using sva modelled surrogate variables SV1 and SV2
approach <- "sva_modelled"
sva_dds <- run_deseq2(sva_dds, meta_data, annotations, Comparisons, n, lfc.cutoff, padj.cutoff, approach)
# calc_norm_counts(sva_dds, annotations, approach)   # uncorrected
svaseq_norm_counts(sva_dds, annotations, approach)   # sva seq batch corrected
plot_qc(sva_dds, meta_data, approach)
}
