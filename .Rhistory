source("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
proj <- "RNASeq_Hany_Natural_LOY_cells"
# Path to directory containing input files or folders
parent_path <- paste0("C:/Users/KailasammS/Box/Saravana@cedars/05. Bioinformatics/RNASeq/", proj, "/")
results_path <- parent_path
# Choose if data is from human or mice. We will adjust gene names accordingly.
species <- "Homo sapiens"
species <- "Mus musculus"
# Define method used for calculating counts.
# NOTE: A folder named "count_results" containing all the count.txt files
# generated by STAR or HTSEQ MUST be present in parent_path
method <- "HTSEQ"
padj.cutoff <- 0.1
lfc.cutoff <- 0     # 0.58 for more strict analysis
# Indicate if you want to plot heatmap, volcano plot, PCA plot
heatmap_plot <- FALSE
volcano_plot <- FALSE
cor_plot  <- FALSE
suffix <- ""
# Directory name containing input files ("Meta_data.xlsx", "Read_data.xlsx") or
# input folders ("count_results" which contain HTSEQ/STAR count output files)
proj <- "EGAD00001007575"
proj <- "EGAD00001003977"
proj <- "RNASeq_Hany_Antigen"
proj <- "RNASeq_Hany_Natural_LOY_cells"
# Path to directory containing input files or folders
parent_path <- paste0("C:/Users/KailasammS/Box/Saravana@cedars/05. Bioinformatics/RNASeq/", proj, "/")
results_path <- parent_path
# Choose if data is from human or mice. We will adjust gene names accordingly.
species <- "Homo sapiens"
species <- "Mus musculus"
# Define method used for calculating counts.
# NOTE: A folder named "count_results" containing all the count.txt files
# generated by STAR or HTSEQ MUST be present in parent_path
method <- "HTSEQ"
method <- "STAR"
# Define DESeq2 thresholds
padj.cutoff <- 0.1
lfc.cutoff <- 0     # 0.58 for more strict analysis
# Indicate if you want to plot heatmap, volcano plot, PCA plot
heatmap_plot <- FALSE
volcano_plot <- FALSE
cor_plot  <- FALSE
suffix <- ""
if (proj=="RNASeq_Hany_Antigen"){
Comparisons <- list(Variable =c("Epitope",  "Growth",     "Condition",         "Condition"),
Target   =c("Edited",   "Progressor", "Edited Progressor", "Unedited Progressor"),
Reference=c("Unedited", "Regressor",  "Edited Regressor",  "Unedited Regressor"))
}
if (proj=="RNASeq_Hany_Natural_LOY_cells"){
Comparisons <- list(Variable =c("Condition"),
Target   =c("Y_Negative"),
Reference=c("Y_Positive"))
}
meta_data <- openxlsx::read.xlsx(xlsxFile=paste0(parent_path, proj, "_Metadata.xlsx"))
# If "Read_data.xlsx" is not prepared yet and counts are stored in count files
read_data <- compile_raw_counts(parent_path, method)
sum(temp_file[2], na.rm=TRUE)
count_folder <- paste0(parent_path, "count_results/")
list.files(path=count_folder)
files <- list.files(path=count_folder)
read_data <- data.frame(0)
i <- 1
temp_file <- read.table(file=paste0(count_folder, files[i]), header=FALSE, sep="\t")
View(temp_file)
method == "STAR"
method <- "HTSEQ"
read_data <- compile_raw_counts(parent_path, method)
View(meta_data)
annotations <- get_annotations(species)
View(read_data)
meta_data <- prep_metadata(meta_data, Variable)
meta_data <- openxlsx::read.xlsx(xlsxFile=paste0(parent_path, proj, "_Metadata.xlsx"))
meta_data <- prep_metadata(meta_data, Variable)
read_data <- prep_readdata(read_data, meta_data)
l <- check_data(read_data, meta_data)
View(meta_data)
View(read_data)
read_data <- compile_raw_counts(parent_path, method)
View(read_data)
View(meta_data)
meta_data <- openxlsx::read.xlsx(xlsxFile=paste0(parent_path, proj, "_Metadata.xlsx"))
read_data <- compile_raw_counts(parent_path, method)
meta_data <- prep_metadata(meta_data, Variable)
read_data <- prep_readdata(read_data, meta_data)
l <- check_data(read_data, meta_data)
meta_data <- l[[2]]
read_data <- l[[1]]
for (n in 1:length(Comparisons$Variable)){
# This generates a new column "id" that has info on samples being comparared
meta_data_comp <- meta_data %>%
dplyr::mutate(id=get(Comparisons$Variable[n]))
combat_corrected_read_data <- combatseq_batch(read_data, meta_data_comp)
sva_dds <- svaseq_batch(read_data, meta_data_comp)
# Perform DESeq2() using in-built batch modelling
approach <- "DESeq2_modelled"
if (length(unique(meta_data_comp$Batch)) > 1){
dds <- DESeq2::DESeqDataSetFromMatrix(countData=read_data,
colData=meta_data_comp,
design=~ Batch+id)
} else {
dds <- DESeq2::DESeqDataSetFromMatrix(countData=read_data,
colData=meta_data_comp,
design=~ id)
}
dds <- run_deseq2(dds, meta_data_comp, annotations, Comparisons, n, lfc.cutoff, padj.cutoff, approach, suffix)
deseq2_norm_counts(dds, annotations, approach, suffix) # batch corrected if you more than 1 batch
plot_qc(dds, meta_data_comp, approach, suffix)
}
proj <- "RNASeq_Hany_CRISPR_LOY_cells"
# Path to directory containing input files or folders
parent_path <- paste0("C:/Users/KailasammS/Box/Saravana@cedars/05. Bioinformatics/RNASeq/", proj, "/")
results_path <- parent_path
# Choose if data is from human or mice. We will adjust gene names accordingly.
species <- "Homo sapiens"
species <- "Mus musculus"
# Define method used for calculating counts.
# NOTE: A folder named "count_results" containing all the count.txt files
# generated by STAR or HTSEQ MUST be present in parent_path
method <- "HTSEQ"
padj.cutoff <- 0.1
lfc.cutoff <- 0     # 0.58 for more strict analysis
# Indicate if you want to plot heatmap, volcano plot, PCA plot
heatmap_plot <- FALSE
volcano_plot <- FALSE
cor_plot  <- FALSE
suffix <- ""
if (proj %in% c("RNASeq_Hany_Natural_LOY_cells","RNASeq_Hany_CRISPR_LOY_cells")){
Comparisons <- list(Variable =c("Condition"),
Target   =c("Y_Negative"),
Reference=c("Y_Positive"))
}
read_data <- compile_raw_counts(parent_path, method)
# white space (" ") with underscore ("_") before importing into R.
meta_data <- openxlsx::read.xlsx(xlsxFile=paste0(parent_path, proj, "_Metadata.xlsx"))
meta_data <- prep_metadata(meta_data, Variable)
read_data <- prep_readdata(read_data, meta_data)
l <- check_data(read_data, meta_data)
meta_data <- l[[2]]
read_data <- l[[1]]
for (n in 1:length(Comparisons$Variable)){
# This generates a new column "id" that has info on samples being comparared
meta_data_comp <- meta_data %>%
dplyr::mutate(id=get(Comparisons$Variable[n]))
combat_corrected_read_data <- combatseq_batch(read_data, meta_data_comp)
sva_dds <- svaseq_batch(read_data, meta_data_comp)
# Perform DESeq2() using in-built batch modelling
approach <- "DESeq2_modelled"
if (length(unique(meta_data_comp$Batch)) > 1){
dds <- DESeq2::DESeqDataSetFromMatrix(countData=read_data,
colData=meta_data_comp,
design=~ Batch+id)
} else {
dds <- DESeq2::DESeqDataSetFromMatrix(countData=read_data,
colData=meta_data_comp,
design=~ id)
}
dds <- run_deseq2(dds, meta_data_comp, annotations, Comparisons, n, lfc.cutoff, padj.cutoff, approach, suffix)
deseq2_norm_counts(dds, annotations, approach, suffix) # batch corrected if you more than 1 batch
plot_qc(dds, meta_data_comp, approach, suffix)
# Perform DESeq2() using combat corrected read counts
if (!identical(read_data, combat_corrected_read_data)){
approach <- "combat_corrected"
combat_dds <- DESeq2::DESeqDataSetFromMatrix(countData=combat_corrected_read_data,
colData=meta_data_comp,
design=~ id)
combat_dds <- run_deseq2(combat_dds, meta_data_comp, annotations, Comparisons, n, lfc.cutoff, padj.cutoff, suffix)
combatseq_norm_counts(combat_dds, annotations, approach, suffix)  #combat batch corrected
plot_qc(combat_dds, meta_data_comp, approach, suffix)
}
}
for (n in 1:length(Comparisons$Variable)){
# This generates a new column "id" that has info on samples being comparared
meta_data_comp <- meta_data %>%
dplyr::mutate(id=get(Comparisons$Variable[n]))
#combat_corrected_read_data <- combatseq_batch(read_data, meta_data_comp)
#sva_dds <- svaseq_batch(read_data, meta_data_comp)
# Perform DESeq2() using in-built batch modelling
approach <- "DESeq2_modelled"
if (length(unique(meta_data_comp$Batch)) > 1){
dds <- DESeq2::DESeqDataSetFromMatrix(countData=read_data,
colData=meta_data_comp,
design=~ Batch+id)
} else {
dds <- DESeq2::DESeqDataSetFromMatrix(countData=read_data,
colData=meta_data_comp,
design=~ id)
}
dds <- run_deseq2(dds, meta_data_comp, annotations, Comparisons, n, lfc.cutoff, padj.cutoff, approach, suffix)
deseq2_norm_counts(dds, annotations, approach, suffix) # batch corrected if you more than 1 batch
plot_qc(dds, meta_data_comp, approach, suffix)
# Perform DESeq2() using combat corrected read counts
if (!identical(read_data, combat_corrected_read_data)){
approach <- "combat_corrected"
combat_dds <- DESeq2::DESeqDataSetFromMatrix(countData=combat_corrected_read_data,
colData=meta_data_comp,
design=~ id)
combat_dds <- run_deseq2(combat_dds, meta_data_comp, annotations, Comparisons, n, lfc.cutoff, padj.cutoff, suffix)
combatseq_norm_counts(combat_dds, annotations, approach, suffix)  #combat batch corrected
plot_qc(combat_dds, meta_data_comp, approach, suffix)
}
}
