View(y)
# Remove parental lines
y <- y[,-c(2:4)]
y <- y %>%
tibble::column_to_rownames("Compound") %>%
dplyr::mutate(across(.cols=everything(), .fns= as.numeric))
# Normalize metabolics data
total <- colSums(y, na.rm=TRUE)
min_val <- min(y, na.rm=TRUE)
total <- total/min_val
y <- y/total
y <- na.omit(y)
y <- y %>%
tibble::rownames_to_column("SYMBOL")
# Remove non DEMs
y <- y %>%
dplyr::filter(SYMBOL %in% DEMs$Compound)
# Remove DEMs not in Amino acid, Glycolysis and Nucleotide pathways
y <- y %>%
dplyr::filter(SYMBOL %in% (y_full %>%
dplyr::filter(Pathway %in% c("Amino acids", "Glycolysis", "Nucleotides")) %>%
dplyr::select(Compound) %>%
unlist(use.names=FALSE)))
# Get DESEq2 normalized counts
rna <- read.xlsx(paste0(data_path, "Normalized_Counts_DESeq2_CRISPR_LOY.xlsx"))
rna <- rna %>%
dplyr::select(SYMBOL, SCR_KO1, SCR_KO2, SCR_KO3, Y_KO1, Y_KO2, Y_KO3) %>%
#dplyr::select(SYMBOL, SCR_KO1, SCR_KO2, SCR_KO3, DDR2_KO1, DDR2_KO2, DDR2_KO3) %>%
# If there are duplicated genes, keep only data for highest expressing copy
dplyr::mutate(n = rowSums(.[,-1])) %>%
dplyr::group_by(SYMBOL) %>%
dplyr::slice_max(n) %>%
dplyr::ungroup() %>%
# Duplicated genes with 0 expression in all samples still remain, remove them
dplyr::distinct_at("SYMBOL", .keep_all = TRUE) %>%
dplyr::select(everything(), -n)
colnames(rna) <- c("SYMBOL", "MB49_Ypos1","MB49_Ypos2","MB49_Ypos3","MB49_Yneg1","MB49_Yneg2", "MB49_Yneg3")
#colnames(rna) <- c("SYMBOL", "MB49_Yneg_scr1", "MB49_Yneg_scr2", "MB49_Yneg_scr3", "MB49_Yneg_DDR2KO1", "MB49_Yneg_DDR2KO2", "MB49_Yneg_DDR2KO3")
# Get list of DEGs
DEGs <- read.xlsx(paste0(data_path, "Results_id_CRISPR_Yneg_vs_CRISPR_YPos_DESeq2_modelled__DEGs.xlsx")) %>%
dplyr::filter(padj < 0.05)
# Filter out non-DEGs
rna <- rna %>%
dplyr::filter(SYMBOL %in% make.names(DEGs$SYMBOL))
# Read Bipul gene sets
gene_sets <- read.xlsx(paste0(data_path, "Bipul_Gene_Sets.xlsx"))
View(gene_sets)
# Filter out DEGs absent in gene sets
rna <- rna %>%
dplyr::filter(SYMBOL %in% make.names(gene_sets$Mouse))
# Merge RNA and metabolite data
data <- dplyr::bind_rows(y, rna)
View(data)
y_all <- data %>%
tibble::column_to_rownames("SYMBOL") %>%
t() %>%
data.frame()
y_all <- y_all[,colSums(y_all) != 0]
y_all_cor_mat <- psych::corr.test(x = y_all, method = "pearson", ci=FALSE)
# Extract ypos data
ypos <- data[,1:4] %>%
tibble::column_to_rownames("SYMBOL") %>%
t() %>%
data.frame()
ypos <- ypos[,colSums(ypos) != 0]
#ypos_cor_mat <- round(cor(x = ypos, method = spearman),2)
ypos_cor_mat <- psych::corr.test(x = ypos, method = "pearson", ci=FALSE)
# Extract yneg data
yneg <- data[,c(1,5,6,7)] %>%
tibble::column_to_rownames("SYMBOL") %>%
t() %>%
data.frame()
yneg <- yneg[,colSums(yneg) != 0]
#yneg_cor_mat <- round(cor(x = yneg, method = "spearman"),2)
yneg_cor_mat <- psych::corr.test(x = yneg, method = "pearson", ci=FALSE)
row_ann <- y_full %>%
dplyr::filter(Compound %in% DEMs$Compound) %>%
dplyr::select(Compound, Pathway) %>%
dplyr::mutate(Compound = make.names(Compound), Dummy = 0) %>%
tibble::column_to_rownames("Compound") %>%
dplyr::filter(Pathway %in% c("Amino acids", "Glycolysis", "Nucleotides"))
row_elements <- row_ann %>%
dplyr::count(Pathway) %>%
dplyr::filter(n>1) %>%
dplyr::select(Pathway) %>%
unlist(use.names=FALSE)
# Column annotation
col_ann <- gene_sets %>%
dplyr::filter(Mouse %in% DEGs$SYMBOL) %>%
dplyr::select(Mouse, GROUP) %>%
dplyr::mutate(Mouse = make.names(Mouse), Dummy = 0) %>%
dplyr::distinct_at("Mouse", .keep_all = TRUE) %>%
tibble::column_to_rownames("Mouse")
col_elements <- col_ann %>%
dplyr::count(GROUP) %>%
dplyr::filter(n>1) %>%
dplyr::select(GROUP) %>%
unlist(use.names=FALSE)
vrds <- viridis_pal()(100)
rdbu <- colorRampPalette(rev(brewer.pal(n = 11, name = "RdBu")))(100)
wb <- openxlsx::createWorkbook()
p <- "rdbu"
cluster <- "clustered"
ypos_matrix <- data.frame(ypos_cor_mat$r)
yneg_matrix <- data.frame(yneg_cor_mat$r)
View(row_ann)
View(yneg_matrix)
View(col_ann)
for (m in c("Amino acids", "Glycolysis", "Nucleotides")){
for (d in c("yneg_matrix", "ypos_matrix")){
dat <- get(d)
if (m == "Amino acids"){
pathway <- "KEGG_ARGININE_AND_PROLINE_METABOLISM"
}else if(m == "Glycolysis"){
pathway <- "KEGG_GLYCOLYSIS_GLUCONEOGENESIS"
}else{
pathway <- "KEGG_PURINE_METABOLISM"
}
dat <- dat[rownames(dat) %in% rownames(row_ann)[row_ann$Pathway == m],
colnames(dat) %in% rownames(col_ann)[col_ann$GROUP == pathway]]
# Breaks
breaks <- c(seq(from = min(dat), to = 0, length.out = 50),
seq(from = max(dat)/100, to = 1, length.out = 50))
#mat <- dat[rownames(dat) %in% make.names(DEMs$Compound), colnames(dat) %in% rna$SYMBOL]
mat <- dat
if (d != "ypos_matrix" | cluster == "clustered"){
# Cluster within each pathway
row_order <- c()
for (g in intersect(row_elements,m)){
temp_mat <- mat[rownames(row_ann)[which(row_ann$Pathway == g)],]
rowclust <- hclust(dist(temp_mat))
row_order <- c(row_order,rownames(temp_mat[rowclust$order,]))
}
# # Add groups that have only 1gene/metabolite
# row_order <- c(row_order, rownames(row_ann)[!(rownames(row_ann) %in% row_order)])
# Cluster within each GROUP
col_order <- c()
for (g in intersect(col_elements,pathway)){
temp_mat <- mat[,colnames(mat) %in% rownames(col_ann)[which(col_ann$GROUP == g)]]
colclust <- hclust(dist(t(temp_mat)))
col_order <- c(col_order,colnames(temp_mat[,colclust$order]))
}
mat <- mat[row_order, col_order]
g <- ""
#gaps_row <- (row_ann %>% dplyr::count(Pathway) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_row <- gaps_row[gaps_row < nrow(mat)]
#gaps_col <- (col_ann %>% dplyr::count(GROUP) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_col <- gaps_col[gaps_col < ncol(mat)]
pheatmap(mat,
cluster_rows = F,
cluster_cols = F,
border_color = NA,
cellwidth = 5,
cellheight = 5,
#gaps_row = gaps_row,
#gaps_col = gaps_col,
annotation_row = row_ann %>% dplyr::select(Pathway),
annotation_col = col_ann %>% dplyr::select(GROUP),
show_rownames = F, show_colnames = F, annotation_legend = TRUE,
breaks = breaks,
color = get(p),
annotation_names_row = FALSE,
annotation_names_col = FALSE,
#treeheight_row = 0,
#treeheight_col = 0,
width = 7,
height = 7,
filename=paste0(data_path, "RNA-metabolite_", m, "_", d,"_", cluster, ".tiff"))
openxlsx::addWorksheet(wb, sheetName = paste0(d, "_", m))
openxlsx::writeData(wb, sheet = paste0(d, "_", m), x = mat, rowNames = TRUE)
}else{
mat <- mat[row_order, col_order]
g <- ""
#gaps_row <- (row_ann %>% dplyr::count(Pathway) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_row <- gaps_row[gaps_row < nrow(mat)]
#gaps_col <- (col_ann %>% dplyr::count(GROUP) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_col <- gaps_col[gaps_col < ncol(mat)]
pheatmap(mat,
cluster_rows = F,
cluster_cols = F,
border_color = NA,
cellwidth = 5,
cellheight = 5,
#gaps_row = gaps_row,
#gaps_col = gaps_col,
annotation_row = row_ann %>% dplyr::filter(Pathway == m) %>% dplyr::select(Pathway),
annotation_col = col_ann %>% dplyr::filter(GROUP == pathway) %>% dplyr::select(GROUP),
show_rownames = F, show_colnames = F, annotation_legend = TRUE,
breaks = breaks,
color = get(p),
annotation_names_row = FALSE,
annotation_names_col = FALSE,
#treeheight_row = 0,
#treeheight_col = 0,
width = 7,
height = 7,
filename=paste0(data_path, "RNA-metabolite_", m, "_", d,"_", cluster, ".tiff"))
}
}
}
openxlsx::saveWorkbook(wb = wb,
file = paste0(data_path, "Fig2_Corr_Matrix.xlsx"),
overwrite = TRUE)
cluster <- "unclustered"  #unclustered
for (m in c("Amino acids", "Glycolysis", "Nucleotides")){
for (d in c("ypos_matrix")){
dat <- get(d)
if (m == "Amino acids"){
pathway <- "KEGG_ARGININE_AND_PROLINE_METABOLISM"
}else if(m == "Glycolysis"){
pathway <- "KEGG_GLYCOLYSIS_GLUCONEOGENESIS"
}else{
pathway <- "KEGG_PURINE_METABOLISM"
}
dat <- dat[rownames(dat) %in% rownames(row_ann)[row_ann$Pathway == m],
colnames(dat) %in% rownames(col_ann)[col_ann$GROUP == pathway]]
# Breaks
breaks <- c(seq(from = min(dat), to = 0, length.out = 50),
seq(from = max(dat)/100, to = 1, length.out = 50))
#mat <- dat[rownames(dat) %in% make.names(DEMs$Compound), colnames(dat) %in% rna$SYMBOL]
mat <- dat
if (d != "ypos_matrix" | cluster == "clustered"){
# Cluster within each pathway
row_order <- c()
for (g in intersect(row_elements,m)){
temp_mat <- mat[rownames(row_ann)[which(row_ann$Pathway == g)],]
rowclust <- hclust(dist(temp_mat))
row_order <- c(row_order,rownames(temp_mat[rowclust$order,]))
}
# # Add groups that have only 1gene/metabolite
# row_order <- c(row_order, rownames(row_ann)[!(rownames(row_ann) %in% row_order)])
# Cluster within each GROUP
col_order <- c()
for (g in intersect(col_elements,pathway)){
temp_mat <- mat[,colnames(mat) %in% rownames(col_ann)[which(col_ann$GROUP == g)]]
colclust <- hclust(dist(t(temp_mat)))
col_order <- c(col_order,colnames(temp_mat[,colclust$order]))
}
mat <- mat[row_order, col_order]
g <- ""
#gaps_row <- (row_ann %>% dplyr::count(Pathway) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_row <- gaps_row[gaps_row < nrow(mat)]
#gaps_col <- (col_ann %>% dplyr::count(GROUP) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_col <- gaps_col[gaps_col < ncol(mat)]
pheatmap(mat,
cluster_rows = F,
cluster_cols = F,
border_color = NA,
cellwidth = 5,
cellheight = 5,
#gaps_row = gaps_row,
#gaps_col = gaps_col,
annotation_row = row_ann %>% dplyr::select(Pathway),
annotation_col = col_ann %>% dplyr::select(GROUP),
show_rownames = F, show_colnames = F, annotation_legend = TRUE,
breaks = breaks,
color = get(p),
annotation_names_row = FALSE,
annotation_names_col = FALSE,
#treeheight_row = 0,
#treeheight_col = 0,
width = 7,
height = 7,
filename=paste0(data_path, "RNA-metabolite_", m, "_", d,"_", cluster, ".tiff"))
openxlsx::addWorksheet(wb, sheetName = paste0(d, "_", m))
openxlsx::writeData(wb, sheet = paste0(d, "_", m), x = mat, rowNames = TRUE)
}else{
mat <- mat[row_order, col_order]
g <- ""
#gaps_row <- (row_ann %>% dplyr::count(Pathway) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_row <- gaps_row[gaps_row < nrow(mat)]
#gaps_col <- (col_ann %>% dplyr::count(GROUP) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_col <- gaps_col[gaps_col < ncol(mat)]
pheatmap(mat,
cluster_rows = F,
cluster_cols = F,
border_color = NA,
cellwidth = 5,
cellheight = 5,
#gaps_row = gaps_row,
#gaps_col = gaps_col,
annotation_row = row_ann %>% dplyr::filter(Pathway == m) %>% dplyr::select(Pathway),
annotation_col = col_ann %>% dplyr::filter(GROUP == pathway) %>% dplyr::select(GROUP),
show_rownames = F, show_colnames = F, annotation_legend = TRUE,
breaks = breaks,
color = get(p),
annotation_names_row = FALSE,
annotation_names_col = FALSE,
#treeheight_row = 0,
#treeheight_col = 0,
width = 7,
height = 7,
filename=paste0(data_path, "RNA-metabolite_", m, "_", d,"_", cluster, ".tiff"))
}
}
}
p <- "rdbu"
cluster <- "unclustered"  #unclustered
ypos_matrix <- data.frame(ypos_cor_mat$r)
yneg_matrix <- data.frame(yneg_cor_mat$r)
d <- "ypos_matrix"
for (m in c("Amino acids", "Glycolysis", "Nucleotides")){
dat <- get(d)
if (m == "Amino acids"){
pathway <- "KEGG_ARGININE_AND_PROLINE_METABOLISM"
}else if(m == "Glycolysis"){
pathway <- "KEGG_GLYCOLYSIS_GLUCONEOGENESIS"
}else{
pathway <- "KEGG_PURINE_METABOLISM"
}
dat <- dat[rownames(dat) %in% rownames(row_ann)[row_ann$Pathway == m],
colnames(dat) %in% rownames(col_ann)[col_ann$GROUP == pathway]]
# Breaks
breaks <- c(seq(from = min(dat), to = 0, length.out = 50),
seq(from = max(dat)/100, to = 1, length.out = 50))
#mat <- dat[rownames(dat) %in% make.names(DEMs$Compound), colnames(dat) %in% rna$SYMBOL]
mat <- dat
}
p <- "rdbu"
cluster <- "unclustered"  #unclustered
ypos_matrix <- data.frame(ypos_cor_mat$r)
yneg_matrix <- data.frame(yneg_cor_mat$r)
for (m in c("Amino acids", "Glycolysis", "Nucleotides")){
for (d in c("yneg_matrix", "ypos_matrix")){
dat <- get(d)
if (m == "Amino acids"){
pathway <- "KEGG_ARGININE_AND_PROLINE_METABOLISM"
}else if(m == "Glycolysis"){
pathway <- "KEGG_GLYCOLYSIS_GLUCONEOGENESIS"
}else{
pathway <- "KEGG_PURINE_METABOLISM"
}
dat <- dat[rownames(dat) %in% rownames(row_ann)[row_ann$Pathway == m],
colnames(dat) %in% rownames(col_ann)[col_ann$GROUP == pathway]]
# Breaks
breaks <- c(seq(from = min(dat), to = 0, length.out = 50),
seq(from = max(dat)/100, to = 1, length.out = 50))
#mat <- dat[rownames(dat) %in% make.names(DEMs$Compound), colnames(dat) %in% rna$SYMBOL]
mat <- dat
if (d != "ypos_matrix" | cluster == "clustered"){
# Cluster within each pathway
row_order <- c()
for (g in intersect(row_elements,m)){
temp_mat <- mat[rownames(row_ann)[which(row_ann$Pathway == g)],]
rowclust <- hclust(dist(temp_mat))
row_order <- c(row_order,rownames(temp_mat[rowclust$order,]))
}
# # Add groups that have only 1gene/metabolite
# row_order <- c(row_order, rownames(row_ann)[!(rownames(row_ann) %in% row_order)])
# Cluster within each GROUP
col_order <- c()
for (g in intersect(col_elements,pathway)){
temp_mat <- mat[,colnames(mat) %in% rownames(col_ann)[which(col_ann$GROUP == g)]]
colclust <- hclust(dist(t(temp_mat)))
col_order <- c(col_order,colnames(temp_mat[,colclust$order]))
}
mat <- mat[row_order, col_order]
g <- ""
#gaps_row <- (row_ann %>% dplyr::count(Pathway) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_row <- gaps_row[gaps_row < nrow(mat)]
#gaps_col <- (col_ann %>% dplyr::count(GROUP) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_col <- gaps_col[gaps_col < ncol(mat)]
pheatmap(mat,
cluster_rows = F,
cluster_cols = F,
border_color = NA,
cellwidth = 5,
cellheight = 5,
#gaps_row = gaps_row,
#gaps_col = gaps_col,
annotation_row = row_ann %>% dplyr::select(Pathway),
annotation_col = col_ann %>% dplyr::select(GROUP),
show_rownames = F, show_colnames = F, annotation_legend = TRUE,
breaks = breaks,
color = get(p),
annotation_names_row = FALSE,
annotation_names_col = FALSE,
#treeheight_row = 0,
#treeheight_col = 0,
width = 7,
height = 7,
filename=paste0(data_path, "RNA-metabolite_", m, "_", d,"_", cluster, ".tiff"))
openxlsx::addWorksheet(wb, sheetName = paste0(d, "_", m))
openxlsx::writeData(wb, sheet = paste0(d, "_", m), x = mat, rowNames = TRUE)
}else{
mat <- mat[row_order, col_order]
g <- ""
#gaps_row <- (row_ann %>% dplyr::count(Pathway) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_row <- gaps_row[gaps_row < nrow(mat)]
#gaps_col <- (col_ann %>% dplyr::count(GROUP) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_col <- gaps_col[gaps_col < ncol(mat)]
pheatmap(mat,
cluster_rows = F,
cluster_cols = F,
border_color = NA,
cellwidth = 5,
cellheight = 5,
#gaps_row = gaps_row,
#gaps_col = gaps_col,
annotation_row = row_ann %>% dplyr::filter(Pathway == m) %>% dplyr::select(Pathway),
annotation_col = col_ann %>% dplyr::filter(GROUP == pathway) %>% dplyr::select(GROUP),
show_rownames = F, show_colnames = F, annotation_legend = TRUE,
breaks = breaks,
color = get(p),
annotation_names_row = FALSE,
annotation_names_col = FALSE,
#treeheight_row = 0,
#treeheight_col = 0,
width = 7,
height = 7,
filename=paste0(data_path, "RNA-metabolite_", m, "_", d,"_", cluster, ".tiff"))
}
}
}
# Save the correlation matrix
wb <- openxlsx::createWorkbook()
p <- "rdbu"
cluster <- "unclustered"  #unclustered
ypos_matrix <- data.frame(ypos_cor_mat$r)
yneg_matrix <- data.frame(yneg_cor_mat$r)
for (m in c("Amino acids", "Glycolysis", "Nucleotides")){
for (d in c("yneg_matrix", "ypos_matrix")){
dat <- get(d)
if (m == "Amino acids"){
pathway <- "KEGG_ARGININE_AND_PROLINE_METABOLISM"
}else if(m == "Glycolysis"){
pathway <- "KEGG_GLYCOLYSIS_GLUCONEOGENESIS"
}else{
pathway <- "KEGG_PURINE_METABOLISM"
}
dat <- dat[rownames(dat) %in% rownames(row_ann)[row_ann$Pathway == m],
colnames(dat) %in% rownames(col_ann)[col_ann$GROUP == pathway]]
# Breaks
breaks <- c(seq(from = min(dat), to = 0, length.out = 50),
seq(from = max(dat)/100, to = 1, length.out = 50))
#mat <- dat[rownames(dat) %in% make.names(DEMs$Compound), colnames(dat) %in% rna$SYMBOL]
mat <- dat
if (d != "ypos_matrix" | cluster == "clustered"){
# Cluster within each pathway
row_order <- c()
for (g in intersect(row_elements,m)){
temp_mat <- mat[rownames(row_ann)[which(row_ann$Pathway == g)],]
rowclust <- hclust(dist(temp_mat))
row_order <- c(row_order,rownames(temp_mat[rowclust$order,]))
}
# # Add groups that have only 1gene/metabolite
# row_order <- c(row_order, rownames(row_ann)[!(rownames(row_ann) %in% row_order)])
# Cluster within each GROUP
col_order <- c()
for (g in intersect(col_elements,pathway)){
temp_mat <- mat[,colnames(mat) %in% rownames(col_ann)[which(col_ann$GROUP == g)]]
colclust <- hclust(dist(t(temp_mat)))
col_order <- c(col_order,colnames(temp_mat[,colclust$order]))
}
mat <- mat[row_order, col_order]
g <- ""
#gaps_row <- (row_ann %>% dplyr::count(Pathway) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_row <- gaps_row[gaps_row < nrow(mat)]
#gaps_col <- (col_ann %>% dplyr::count(GROUP) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_col <- gaps_col[gaps_col < ncol(mat)]
pheatmap(mat,
cluster_rows = F,
cluster_cols = F,
border_color = NA,
cellwidth = 5,
cellheight = 5,
#gaps_row = gaps_row,
#gaps_col = gaps_col,
annotation_row = row_ann %>% dplyr::select(Pathway),
annotation_col = col_ann %>% dplyr::select(GROUP),
show_rownames = F, show_colnames = F, annotation_legend = TRUE,
breaks = breaks,
color = get(p),
annotation_names_row = FALSE,
annotation_names_col = FALSE,
#treeheight_row = 0,
#treeheight_col = 0,
width = 7,
height = 7,
filename=paste0(data_path, "RNA-metabolite_", m, "_", d,"_", cluster, ".tiff"))
openxlsx::addWorksheet(wb, sheetName = paste0(d, "_", m))
openxlsx::writeData(wb, sheet = paste0(d, "_", m), x = mat, rowNames = TRUE)
}else{
mat <- mat[row_order, col_order]
g <- ""
#gaps_row <- (row_ann %>% dplyr::count(Pathway) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_row <- gaps_row[gaps_row < nrow(mat)]
#gaps_col <- (col_ann %>% dplyr::count(GROUP) %>% dplyr::mutate(n = cumsum(n)) %>% dplyr::select(n) %>% unlist(use.names = FALSE))
#gaps_col <- gaps_col[gaps_col < ncol(mat)]
pheatmap(mat,
cluster_rows = F,
cluster_cols = F,
border_color = NA,
cellwidth = 5,
cellheight = 5,
#gaps_row = gaps_row,
#gaps_col = gaps_col,
annotation_row = row_ann %>% dplyr::filter(Pathway == m) %>% dplyr::select(Pathway),
annotation_col = col_ann %>% dplyr::filter(GROUP == pathway) %>% dplyr::select(GROUP),
show_rownames = F, show_colnames = F, annotation_legend = TRUE,
breaks = breaks,
color = get(p),
annotation_names_row = FALSE,
annotation_names_col = FALSE,
#treeheight_row = 0,
#treeheight_col = 0,
width = 7,
height = 7,
filename=paste0(data_path, "RNA-metabolite_", m, "_", d,"_", cluster, ".tiff"))
}
}
}
