dplyr::select("GEO_ID", "Sex", "Time", "Status", all_of(split_by), all_of(gene))
mat <- calculate_cutoffs(mat, x)
# Save the data from output of calculate_cutoffs()
survival_data <- dplyr::bind_rows(survival_data, mat[[1]])
stats$gene <- c(stats$gene, mat[[2]]$gene)
stats$group <- c(stats$group, mat[[2]]$group)
stats$lower_cutoff <- c(stats$lower_cutoff, mat[[2]]$lower)
stats$middle_cutoff <- c(stats$middle_cutoff, mat[[2]]$middle)
stats$upper_cutoff <- c(stats$upper_cutoff, mat[[2]]$upper)
}
# Populate the model variable by concatenating "Expression" and "split_by"
survival_data <- survival_data %>%
dplyr::mutate(model = paste0(Expression, "_", get(split_by))) %>%
dplyr::filter(!is.na(get(split_by)))
} else{
mat <- expr_df
x <- "NA"
mat <- calculate_cutoffs(mat, x)
# Save the data from output of calculate_cutoffs()
survival_data <- mat[[1]]
stats$gene <- c(stats$gene, mat[[2]]$gene)
stats$group <- c(stats$group, mat[[2]]$group)
stats$lower_cutoff <- c(stats$lower_cutoff, mat[[2]]$lower)
stats$middle_cutoff <- c(stats$middle_cutoff, mat[[2]]$middle)
stats$upper_cutoff <- c(stats$upper_cutoff, mat[[2]]$upper)
# Rename the column "Expression" to "model"
survival_data <- survival_data %>%
dplyr::rename(model = Expression)
}
# STEP 2: Calculate survival stats
# If each group has to be plotted in separate plots, subset the survival_data
# and pass it to plot_survival(). Else, pass entire survival_data to
# plot_survival().
if (combine_plot == "FALSE") {
if (!is.na(split_by)){
for (x in (expr_df %>% dplyr::distinct(get(split_by)))[[1]]) {
s_data <- survival_data %>% dplyr::filter(get(split_by) == x)
cox_stats <- plot_survival(s_data, x)
# Save the data from output of plot_survival()
stats$HR <- c(stats$HR, cox_stats$HR )
stats$CI_lower <- c(stats$CI_lower, cox_stats$CI_lower)
stats$CI_upper <- c(stats$CI_upper, cox_stats$CI_upper)
stats$pvalue <- c(stats$pvalue, cox_stats$pvalue)
}
} else {
s_data <- survival_data
x <- "NA"
cox_stats <- plot_survival(s_data, x)
# Save the data from output of plot_survival()
stats$HR <- c(stats$HR, cox_stats$HR )
stats$CI_lower <- c(stats$CI_lower, cox_stats$CI_lower)
stats$CI_upper <- c(stats$CI_upper, cox_stats$CI_upper)
stats$pvalue <- c(stats$pvalue, cox_stats$pvalue)
}
}  else{
s_data <- survival_data
x <- "NA"
cox_stats <- plot_survival(s_data, x)
# Save the data from output of plot_survival()
stats$HR <- c(stats$HR, cox_stats$HR )
stats$CI_lower <- c(stats$CI_lower, cox_stats$CI_lower)
stats$CI_upper <- c(stats$CI_upper, cox_stats$CI_upper)
stats$pvalue <- c(stats$pvalue, cox_stats$pvalue)
}
return(list(survival_data, stats))
}
calculate_cutoffs <- function(df, group){
# Identify upper & lower cutoffs based on stratify_criteria
#*************************Split samples by median**************************#
if(stratify_criteria == "m"){
quartiles <- stats::quantile(x = df[[gene]],
probs = c(0, 0.25, 0.50, 0.75, 1),
na.rm=TRUE)
cutoff_lower_end <- quartiles[[3]]
cutoff_upper_end <- quartiles[[3]]
cutoff_middle <- "NA"
}
#****************Split samples into top and bottom tertiles****************#
if(stratify_criteria == "t"){
tertiles <- stats::quantile(x = df[[gene]],
probs = c(0, 0.33, 0.66, 1),
na.rm=TRUE)
cutoff_lower_end <- tertiles[[2]]
cutoff_upper_end <- tertiles[[3]]
cutoff_middle <- "NA"
}
#***************Split samples into top and bottom quartiles****************#
if(stratify_criteria == "q"){
quartiles <- stats::quantile(x = df[[gene]],
probs = c(0, 0.25, 0.50, 0.75, 1),
na.rm=TRUE)
cutoff_lower_end <- quartiles[[2]]
cutoff_upper_end <- quartiles[[4]]
cutoff_middle <- quartiles[[3]]
}
#*********************Split expression range by thirds*********************#
if(stratify_criteria == "th"){
quartiles <- stats::quantile(x = df[[gene]],
probs = c(0, 0.25, 0.50, 0.75, 1),
na.rm=TRUE)
iqr <- stats::IQR(x = df[[gene]],
na.rm=TRUE)
# Normal range of expression values lie between cutoff_lower & cutoff_upper
cutoff_upper <- quartiles[[4]]+1.5*iqr
cutoff_lower <- dplyr::if_else(quartiles[[1]]-1.5*iqr > 0, quartiles[[1]]-1.5*iqr, 0)
# Based on normal range of expression, identify onethird & twothird cutoff
cutoff_lower_end <- cutoff_lower + (cutoff_upper-cutoff_lower)/3
cutoff_upper_end <- cutoff_lower + (cutoff_upper-cutoff_lower)*2/3
cutoff_middle <- "NA"
}
#***************Split expression range using optimal cutoff****************#
if(stratify_criteria == "o"){
quartiles <- stats::quantile(x = df[[gene]],
probs = c(0, 0.25, 0.50, 0.75, 1),
na.rm=TRUE)
# Sometimes quartiles will look like:
# 0%       25%      50%      75%     100%
# 0.000000 0.000000 0.000000 0.000000 3.495493
# In such cases, surv_cutpoint() will fail. So, we add extra if() here.
if (quartiles[[4]] > quartiles[[2]]){
res.cut <- survminer::surv_cutpoint(data = df,
time = "Time",
event = "Status",
variables = gene)
cutoff_lower_end <- res.cut$cutpoint$cutpoint
cutoff_upper_end <- res.cut$cutpoint$cutpoint
cutoff_middle <- "NA"
} else{
#cat("Surv cutpoint unable to detect optimum cutoff")
cutoff_lower_end <- "NA"
cutoff_upper_end <- "NA"
cutoff_middle <- "NA"
}
}
# Categorize the data based on above cutoffs
if (all_quartiles == "TRUE"){
df <- df %>%
dplyr::mutate(Expression = dplyr::if_else(get(gene) > cutoff_upper_end, "HIGH",
dplyr::if_else(get(gene) < cutoff_lower_end, "LOW",
dplyr::if_else(get(gene) < cutoff_middle, "MED_LOW",
"MED_HIGH"))))
} else{
df <- df %>%
dplyr::mutate(Expression = dplyr::if_else(get(gene) > cutoff_upper_end, "HIGH",
dplyr::if_else(get(gene) < cutoff_lower_end, "LOW", "MID"))) %>%
dplyr::filter(Expression != "MID")
}
# # Print the cutoffs
# cat("\nGene         :", gene)
# cat("\nGroup        :", group)
# cat("\nLower cutoff :", cutoff_lower_end)
# cat("\nUpper cutoff :", cutoff_upper_end)
# cat("\nMiddle cutoff:", cutoff_middle)
# Create a list to store cutoff values
ls <- list("group" = c(),
"gene" = c(),
"lower" = c(),
"upper" = c(),
"middle" = c())
ls$group <- c(group)
ls$gene <- c(gene)
ls$lower <- c(cutoff_lower_end)
ls$upper <- c(cutoff_upper_end)
ls$middle <- c(cutoff_middle)
# Return the df
return(list(df, ls))
}
plot_survival <- function(survival_data, group){
# If all samples belong to one group (like LOW or HIGH or males or female),
# then quit the function as comparison cannot be done
if (nrow(survival_data %>% dplyr::count(model)) > 1){
# Create a survival object where Alive = 0, Dead = 1
survival_object <- survival::Surv(time = survival_data$Time,
event = survival_data$Status,
type = "right",
origin = 0)
# Create a formula for plotting survival curve
survival_formula <- survival_object ~ model
# Create a fit for survival curve. survfit() gives error in ggsurvplot(). Use surv_fit()
survival_curve <- survminer::surv_fit(formula = survival_formula,
data = survival_data,
type = "kaplan-meier",
group.by = NULL,
match.fd = FALSE)
# Check summary of the survival curve with time duration of our interest
#cat("\nRange of survival (months):", range(survival_data$Time, na.rm=TRUE), "\n")
base::summary(survival_curve, times = base::seq(from = floor(range(survival_data$Time, na.rm=TRUE)[[1]]),
to = ceiling(range(survival_data$Time, na.rm=TRUE)[[2]]),
by = 3))
# Create a Cox model for the survival curve and calculate stats
cox_model <- survival::coxph(formula = survival_formula,
data = survival_data)
#print(summary(cox_model))
cat("\n")
# Calculate HR, 95% CI for HR, p-val
# NOTE: Variable mentioned here is the numerator in h1(t)/h0(t).
# The reference variable h0(t) will not be mentioned in co-efficients.
# Make sure this is not the reference level i.e. low expression. If this is
# the reference, then we need to reverse the HR ratio, legend labels
#print(names(cox_model$coefficients))
# If all samples belong to more than 2 groups (like LOW, MID, HIGH), then
# we cannot have survival stats. SO, we set them to 0.
if (nrow(survival_data %>% dplyr::count(model)) == 2){
if (stringr::str_detect(names(cox_model$coefficients), reference)){
HR <- round(exp(-cox_model$coefficients[[1]]), 2)
CI <- round(exp(-confint(cox_model)), 2)
CI_1 <- CI[1]
CI[1] <- CI[2]
CI[2] <- CI_1
p_val <- survminer::surv_pvalue(fit = survival_curve,
stratify_criteria = "survdiff",
test.for.trend = FALSE,
combine = FALSE)
} else {
HR <- round(exp(cox_model$coefficients[[1]]),2)
CI <- round(exp(confint(cox_model)),2)
p_val <- survminer::surv_pvalue(fit = survival_curve,
stratify_criteria = "survdiff",
test.for.trend = FALSE,
combine = FALSE)
}
} else {
HR <- 0
CI <- c(0, 0)
p_val <- c(0, 0)
}
# Plot the survival curve using survminer::ggsurvplot() instead of base::plot()
# ggsurvplot() produces a list of ggplot objects: a survival curve and a risk table
# Saving it using cowplot() first and then using ggsave() works nicely as
# compared to saving directly using ggsave()
if(plot_curve =="TRUE"){
# Plot the survival curve
legend_label <- survival_data %>%
dplyr::count(model) %>%
dplyr::select(model) %>%
unlist(.,use.names=FALSE)
survival_plot <- survminer::ggsurvplot(fit = survival_curve,
pval = FALSE,
conf.int = confidence_interval,
risk.table = plot_risk_table,
legend.title = legend_title,
legend.labs = legend_label,
palette = color_palette,
break.time.by = 3,                # break X axis in time intervals by 3 months
xlab = "Time (Months)",           # customize X axis label
ylab = "Survival Probability",    # customize Y axis label
title = dplyr::if_else(gene == "combined.exp", "", gene),
risk.table.y.text.col = T,        # colour risk table text annotations
size = 2,
censor.size = 9)
# Plot p and HR value
grob1 <- grobTree(textGrob(label = paste0("p = ", formatC(p_val[[2]], format = "e", digits = 1),
"\nHR = ", round(HR,1), " [", round(CI[1],1), ", ", round(CI[2],1), "]"),
x = 0.50,
y = 0.90,
hjust = 0,
gp = grid::gpar(fontfamily="Times", fontface="bold", col="black", fontsize=15)))
# Add p values and HR values to plot
survival_plot$plot <- survival_plot$plot %++%
ggplot2::annotation_custom(grob1)
cowplot::plot_grid(plotlist = survival_plot,
align = "hv",
axis = "tblr",
nrow = 2,
ncol = 1,
rel_widths = 1,
rel_heights = c(1,0.45),
labels = NULL,
label_size = 14,
label_fontfamily = NULL,
label_fontface = "bold",
label_colour = NULL,
label_x = 0,
label_y = 1,
hjust = -0.5,
vjust = 1.5)
# Save the plot
ggplot2::ggsave(filename = gsub("/", "-", x=paste0(gse, "_", group, suffix, "_", stratify_criteria, "_", gene, ".pdf")),
plot = last_plot(),
device = "pdf",
path = parent_path,
#width = 8.5,
#height = 11,
units = c("in"),
dpi = 600,
limitsize = TRUE,
bg = NULL)
}
} else {
HR <- 0
CI <- c(0, 0)
p_val <- c(0, 0)
}
# Create a list to store survival stats
ls <- list("group" = c(), "HR" = c(), "CI_lower" = c(), "CI_upper" = c(), "pvalue" =c())
ls$group <- c(group)
ls$HR <- c(HR)
ls$CI_lower <- c(CI[1])
ls$CI_upper <- c(CI[2])
ls$pvalue <- c(p_val[[2]])
return(ls)
}
# We need to calculate a combined expression value of all genes in the gene
# signature for each sample. Next, we use surv_cutpoint() to classify samples
# into high and low groups and plot survival curves.
# There are several approaches to calculate the combined expression value. While
# normal z-scaling is logical, https://doi.org/10.1186/gb-2006-7-10-r93
# recommends a more advanced z-scaling which is implemented below. Refer
# "Measuring gene set expression" in "Materials & stratify_criteria" section.
advanced_Z <- function(gset, eset) {
# Compute z-score for gene set of interest
ix <- is.element(toupper(rownames(eset)), toupper(gset))
cat(sum(ix))
if (sum(ix)>0){
avg_gset <- base::apply(X=eset[ix,], MARGIN=2, FUN=mean, na.rm=TRUE)
avg_all <- base::apply(X=eset, MARGIN=2, FUN=mean, na.rm=TRUE)
sd_all <- base::apply(X=eset, MARGIN=2, FUN=sd, na.rm=TRUE)
z <- (avg_gset - avg_all)*sqrt(sum(ix))/sd_all
} else{
z <- NA
}
return(z)
}
normal_Z <- function(gset, eset) {
# Compute z-score for gene set of interest
eset <- eset[gset,]
a <- t(scale(t(eset)))
z <- colSums(a, na.rm=TRUE)
return(z)
}
# If workign with huge datasets, try this
options(future.globals.maxSize = 30000 * 1024^2)
# Define the gse of the project
gse <- "TCGA_BLCA"
wb <- openxlsx::createWorkbook()
## Store path of parent directory i.e. root directory for the project
parent_path <- "C:/Users/saswa/Box/Data_Saswat/New genes_04162024/"
# Import read_data
read_data <- openxlsx::read.xlsx(xlsxFile = paste0(parent_path, gse, "_Normalized.xlsx"))
meta_data <- metadata %>%
dplyr::filter(Sex=="Male")
parent_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Desktop/Collaboration projects data/Prince/"
results_path <- parent_path
species <- "Mus musculus"
gmt_files <- list.files("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/GSEA_genesets/Mouse/", full.names = TRUE)
annotations <- get_annotations(species)
source("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
parent_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Desktop/Collaboration projects data/Prince/"
results_path <- parent_path
species <- "Mus musculus"
gmt_files <- list.files("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/GSEA_genesets/Mouse/", full.names = TRUE)
annotations <- get_annotations(species)
for (gmt_file in gmt_files){
# Import DEGs dataframe with "SYMBOL", "padj" and "log2FoldChange" columns
DEGs_df <- read.xlsx(paste0(parent_path, "Natural_LOY.xlsx"))
fgsea(DEGs_df, gmt_file, annotations, results_path)
}
DEGs_df <- DEGs_df %>%
dplyr::distinct_at("SYMBOL", .keep_all = TRUE) %>%
dplyr::filter(!is.na(padj), !is.na(SYMBOL)) %>%
dplyr::arrange(desc(log2FoldChange))
DEGs_list <- DEGs_df$log2FoldChange
names(DEGs_list) <- DEGs_df$SYMBOL
score_type <- dplyr::if_else(max(DEGs_list) > 0 & min(DEGs_list) < 0, "std",
dplyr::if_else(max(DEGs_list) < 0 & min(DEGs_list) < 0, "neg", "pos"))
gmt <- fgsea::gmtPathways(gmt_file)
gmt_name <- gsub(pattern="^.*/|v2023.*$", replacement="", x=gmt_file)
for (i in 1:length(gmt)){
gmt[[i]] <- gmt[[i]][gmt[[i]] %in% names(DEGs_list)]
}
#****************************************************************************#
#                                  RUN fGSEA                                 #
#****************************************************************************#
fgsea <- fgsea::fgseaMultilevel(pathways = gmt,
stats = DEGs_list,
scoreType = score_type,
sampleSize = 101,
minSize = 1,
maxSize = length(DEGs_list) - 1,
eps = 1e-50,
nproc = 0,
gseaParam = 1,
BPPARAM = NULL,
nPermSimple = 10000)
length(DEGs_list)
table(is.na(names(DEGs_list)))
View(DEGs_df)
is.na(DEGs_df$SYMBOL)
sum(is.na(DEGs_df$SYMBOL))
sum(is.na(DEGs_df$log2FoldChange))
View(gmt)
View(DEGs_df)
DEGs_list
table(is.na(names(DEGs_list)))
fgsea <- fgsea::fgseaMultilevel(pathways = gmt,
stats = DEGs_list,
scoreType = score_type,
sampleSize = 101,
minSize = 1,
maxSize = length(DEGs_list) - 1,
eps = 1e-50,
nproc = 0,
gseaParam = 1,
BPPARAM = NULL,
nPermSimple = 10000)
sum(is.infinite(DEGs_df$log2FoldChange))
sum(is.infinite(DEGs_df$padj))
min(DEGs_df$padj)
max(DEGs_df$padj)
summary(DEGs_df)
sapply(DEGs_df, class)
DEGs_df1 <- DEGs_df
DEGs_df <- DEGs_df %>%
dplyr::distinct_at("SYMBOL", .keep_all = TRUE) %>%
dplyr::filter(!is.na(padj), !is.na(SYMBOL)) %>%
dplyr::mutate(log2FoldChange = is.numeric(log2FoldChange),
padj = is.numeric(padj)) %>%
dplyr::arrange(desc(log2FoldChange))
DEGs_list <- DEGs_df$log2FoldChange
names(DEGs_list) <- DEGs_df$SYMBOL
score_type <- dplyr::if_else(max(DEGs_list) > 0 & min(DEGs_list) < 0, "std",
dplyr::if_else(max(DEGs_list) < 0 & min(DEGs_list) < 0, "neg", "pos"))
gmt <- fgsea::gmtPathways(gmt_file)
gmt_name <- gsub(pattern="^.*/|v2023.*$", replacement="", x=gmt_file)
# From each gene set, remove genes that are absent in your DEGs_list
for (i in 1:length(gmt)){
gmt[[i]] <- gmt[[i]][gmt[[i]] %in% names(DEGs_list)]
}
fgsea <- fgsea::fgseaMultilevel(pathways = gmt,
stats = DEGs_list,
scoreType = score_type,
sampleSize = 101,
minSize = 1,
maxSize = length(DEGs_list) - 1,
eps = 1e-50,
nproc = 0,
gseaParam = 1,
BPPARAM = NULL,
nPermSimple = 10000)
summary(DEGs_df)
DEGs_df <- DEGs_df %>%
dplyr::distinct_at("SYMBOL", .keep_all = TRUE) %>%
dplyr::filter(!is.na(padj), !is.na(SYMBOL)) %>%
dplyr::mutate(log2FoldChange = as.numeric(log2FoldChange),
padj = as.numeric(padj)) %>%
dplyr::arrange(desc(log2FoldChange))
DEGs_list <- DEGs_df$log2FoldChange
names(DEGs_list) <- DEGs_df$SYMBOL
summary(DEGs_df)
View(DEGs_df)
View(DEGs_df1)
DEGs_df <- read.xlsx(paste0(parent_path, "Natural_LOY.xlsx"))
View(DEGs_df)
source("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
parent_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Desktop/Collaboration projects data/Prince/"
results_path <- parent_path
species <- "Mus musculus"
gmt_files <- list.files("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/GSEA_genesets/Mouse/", full.names = TRUE)
annotations <- get_annotations(species)
for (gmt_file in gmt_files){
# Import DEGs dataframe with "SYMBOL", "padj" and "log2FoldChange" columns
DEGs_df <- read.xlsx(paste0(parent_path, "Natural_LOY.xlsx"))
fgsea(DEGs_df, gmt_file, annotations, results_path)
}
DEGs_df <- DEGs_df %>%
dplyr::distinct_at("SYMBOL", .keep_all = TRUE) %>%
dplyr::filter(!is.na(padj), !is.na(SYMBOL)) %>%
dplyr::mutate(log2FoldChange = as.numeric(log2FoldChange),
padj = as.numeric(padj)) %>%
dplyr::arrange(desc(log2FoldChange))
DEGs_list <- DEGs_df$log2FoldChange
names(DEGs_list) <- DEGs_df$SYMBOL
summary(DEGs_df)
for (gmt_file in gmt_files){
# Import DEGs dataframe with "SYMBOL", "padj" and "log2FoldChange" columns
DEGs_df <- read.xlsx(paste0(parent_path, "Natural_LOY.xlsx"))
fgsea(DEGs_df, gmt_file, annotations, results_path)
}
for (gmt_file in gmt_files){
# Import DEGs dataframe with "SYMBOL", "padj" and "log2FoldChange" columns
#DEGs_df <- read.xlsx(paste0(parent_path, "Natural_LOY/Natural_LOY.xlsx"))
DEGs_df <- read.xlsx(paste0(parent_path, "CRISPR_LOY/CRISPR_LOY.xlsx"))
fgsea(DEGs_df, gmt_file, annotations, results_path)
}
source("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
parent_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Desktop/Collaboration projects data/Prince/"
results_path <- parent_path
species <- "Mus musculus"
gmt_files <- list.files("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/GSEA_genesets/Mouse/", full.names = TRUE)
annotations <- get_annotations(species)
for (gmt_file in gmt_files){
# Import DEGs dataframe with "SYMBOL", "padj" and "log2FoldChange" columns
#DEGs_df <- read.xlsx(paste0(parent_path, "Natural_LOY/Natural_LOY_DEPs.xlsx"))
DEGs_df <- read.xlsx(paste0(parent_path, "CRISPR_LOY/CRISPR_LOY_DEPs.xlsx"))
#DEGs_df <- read.xlsx(paste0(parent_path, "CRISPR_LOY/Results_id_Y_Negative_vs_Y_Positive_DESeq2_modelled__DEGs.xlsx"))
#DEGs_df <- read.xlsx(paste0(parent_path, "Natural_LOY/Results_id_Y_Negative_vs_Y_Positive_DESeq2_modelled__DEGs.xlsx"))
fgsea(DEGs_df, gmt_file, annotations, results_path)
}
source("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
parent_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Desktop/Collaboration projects data/Prince/"
results_path <- parent_path
species <- "Mus musculus"
gmt_files <- list.files("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/GSEA_genesets/Mouse/", full.names = TRUE)
annotations <- get_annotations(species)
for (gmt_file in gmt_files){
# Import DEGs dataframe with "SYMBOL", "padj" and "log2FoldChange" columns
#DEGs_df <- read.xlsx(paste0(parent_path, "Natural_LOY/Natural_LOY_DEPs.xlsx"))
DEGs_df <- read.xlsx(paste0(parent_path, "CRISPR_LOY/CRISPR_LOY_DEPs.xlsx"))
#DEGs_df <- read.xlsx(paste0(parent_path, "CRISPR_LOY/Results_id_Y_Negative_vs_Y_Positive_DESeq2_modelled__DEGs.xlsx"))
#DEGs_df <- read.xlsx(paste0(parent_path, "Natural_LOY/Results_id_Y_Negative_vs_Y_Positive_DESeq2_modelled__DEGs.xlsx"))
fgsea(DEGs_df, gmt_file, annotations, results_path)
}
