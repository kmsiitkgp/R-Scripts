palette_colors <- colorspace::adjust_transparency(col = colors[i], alpha = alphas[1])
for (n in 2:palette_n){
palette_colors <- c(palette_colors,
colorspace::adjust_transparency(col = colors[i], alpha = alphas[n]))
}
} else if (palette_n == 1 & heatmap_params$discrete_panel == FALSE) {
palette_colors <- colorspace::adjust_transparency(col = colors[i], alpha = alphas[1])
} else{
end_n <- start_n + palette_n - 1
palette_colors <- colors[start_n:end_n]
start_n <- end_n+1
}
# Sort the elements within each variable
names(palette_colors) <- sort(elements)
# Merge all annotation colors
ann_colors <- c(ann_colors, list(palette_colors))
}
# Specify variable names to annotation colors
names(ann_colors) <- names(ann_list)
} else if (ann_total == 1){
elements <- ann_list[[1]]
palette_n <- length(elements)
palette_colors <- colors[1:palette_n]
names(palette_colors) <- sort(elements)
ann_colors <- c(ann_colors, list(palette_colors))
names(ann_colors) <- names(ann_list)
} else {
cat("There are no row or column annotations")
}
ann_colors
colors[1:6]
source("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
source("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
heatmap_params <- list(anno.row       = c("Class"),        # NULL, c("Group")
anno.column    = c("ajcc_pathologic_stage"),
row.split      = c("Class"),
col.split      = NA, #c("ajcc_pathologic_stage"),
row.cluster    = c("alphabetical"),           # c("alphabetical", "group", "all")
col.cluster    = c("all"),           # c("alphabetical", "group", "all")
discrete_panel = TRUE,
log.transform  = TRUE,
scale          = TRUE,
border_color   = "white",
bar_width      = NA,              # NA , 5
bar_height     = NA,              # NA , 5
width          = 5,               # NA
height         = 5,               # NA
matrix_color   = "rdbu",          # c("vrds", "rdbu")
expr_legend    = TRUE,  # set FALSE if it overlaps with annotation legends
file_format    = "tiff")
plot_genes <- c(cam_genes, scaffold_genes)
disp_genes <- plot_genes
output_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Desktop/"
metadata_row <- data.frame(plot_genes) %>%
dplyr::mutate(Class = dplyr::case_when(plot_genes %in% cam_genes ~ "SynCAM",
TRUE ~ "Scaffold")) %>%
dplyr::rename(SYMBOL = plot_genes)
# Import TCGA BLCA metadata
parent_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/FromBox/Dr.Chao project/"
metadata_column <- openxlsx::read.xlsx(paste0(parent_path,"!TCGA_BLCA_Metadata.xlsx"))
metadata_column <- metadata_column %>%
dplyr::mutate(Sample_ID = make.names(names = Sample_id)) %>%
dplyr::mutate(Time = as.numeric(Time)) %>%
dplyr::filter(Time > 0 & !is.na(Time)) %>%
dplyr::distinct_at("GEO_ID", .keep_all = TRUE) %>%
dplyr::filter(!is.na(get(heatmap_params$anno.column)))
plot_heatmap(normalized_counts, metadata_column, metadata_row, heatmap_params,
plot_genes, disp_genes, "TCGA.Stage", output_path)
source("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
heatmap_params <- list(anno.row       = c("Class"),        # NULL, c("Group")
anno.column    = c("ajcc_pathologic_stage"),
row.split      = c("Class"),
col.split      = NA, #c("ajcc_pathologic_stage"),
row.cluster    = c("alphabetical"),           # c("alphabetical", "group", "all")
col.cluster    = c("all"),           # c("alphabetical", "group", "all")
discrete_panel = TRUE,
log.transform  = TRUE,
scale          = TRUE,
border_color   = "white",
bar_width      = NA,              # NA , 5
bar_height     = NA,              # NA , 5
width          = 5,               # NA
height         = 5,               # NA
matrix_color   = "rdbu",          # c("vrds", "rdbu")
expr_legend    = TRUE,  # set FALSE if it overlaps with annotation legends
file_format    = "tiff")
plot_genes <- c(cam_genes, scaffold_genes)
disp_genes <- plot_genes
output_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Desktop/"
metadata_row <- data.frame(plot_genes) %>%
dplyr::mutate(Class = dplyr::case_when(plot_genes %in% cam_genes ~ "SynCAM",
TRUE ~ "Scaffold")) %>%
dplyr::rename(SYMBOL = plot_genes)
# Import TCGA BLCA metadata
parent_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/FromBox/Dr.Chao project/"
metadata_column <- openxlsx::read.xlsx(paste0(parent_path,"!TCGA_BLCA_Metadata.xlsx"))
metadata_column <- metadata_column %>%
dplyr::mutate(Sample_ID = make.names(names = Sample_id)) %>%
dplyr::mutate(Time = as.numeric(Time)) %>%
dplyr::filter(Time > 0 & !is.na(Time)) %>%
dplyr::distinct_at("GEO_ID", .keep_all = TRUE) %>%
dplyr::filter(!is.na(get(heatmap_params$anno.column)))
heatmap_params <- list(anno.row       = c("Class"),        # NULL, c("Group")
anno.column    = c("ajcc_pathologic_stage"),
row.split      = c("Class"),
col.split      = NA, #c("ajcc_pathologic_stage"),
row.cluster    = c("alphabetical"),           # c("alphabetical", "group", "all")
col.cluster    = c("all"),           # c("alphabetical", "group", "all")
discrete_panel = TRUE,
log.transform  = TRUE,
scale          = TRUE,
border_color   = "white",
bar_width      = NA,              # NA , 5
bar_height     = NA,              # NA , 5
width          = 11,               # NA
height         = 8.5,               # NA
matrix_color   = "rdbu",          # c("vrds", "rdbu")
expr_legend    = TRUE,  # set FALSE if it overlaps with annotation legends
file_format    = "tiff")
heatmap_params <- list(anno.row       = c("Class"),        # NULL, c("Group")
anno.column    = c("ajcc_pathologic_stage"),
row.split      = c("Class"),
col.split      = NA, #c("ajcc_pathologic_stage"),
row.cluster    = c("alphabetical"),           # c("alphabetical", "group", "all")
col.cluster    = c("all"),           # c("alphabetical", "group", "all")
discrete_panel = TRUE,
log.transform  = TRUE,
scale          = TRUE,
border_color   = "white",
bar_width      = 1,              # NA , 5
bar_height     = 1,              # NA , 5
width          = 11,               # NA
height         = 8.5,               # NA
matrix_color   = "rdbu",          # c("vrds", "rdbu")
expr_legend    = TRUE,  # set FALSE if it overlaps with annotation legends
file_format    = "tiff")
plot_genes <- c(cam_genes, scaffold_genes)
disp_genes <- plot_genes
output_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Desktop/"
metadata_row <- data.frame(plot_genes) %>%
dplyr::mutate(Class = dplyr::case_when(plot_genes %in% cam_genes ~ "SynCAM",
TRUE ~ "Scaffold")) %>%
dplyr::rename(SYMBOL = plot_genes)
# Import TCGA BLCA metadata
parent_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/FromBox/Dr.Chao project/"
metadata_column <- openxlsx::read.xlsx(paste0(parent_path,"!TCGA_BLCA_Metadata.xlsx"))
metadata_column <- metadata_column %>%
dplyr::mutate(Sample_ID = make.names(names = Sample_id)) %>%
dplyr::mutate(Time = as.numeric(Time)) %>%
dplyr::filter(Time > 0 & !is.na(Time)) %>%
dplyr::distinct_at("GEO_ID", .keep_all = TRUE) %>%
dplyr::filter(!is.na(get(heatmap_params$anno.column)))
plot_heatmap(normalized_counts, metadata_column, metadata_row, heatmap_params,
plot_genes, disp_genes, "TCGA.Stage", output_path)
heatmap_params <- list(anno.row       = c("Class"),        # NULL, c("Group")
anno.column    = c("ajcc_pathologic_stage"),
row.split      = c("Class"),
col.split      = NA, #c("ajcc_pathologic_stage"),
row.cluster    = c("alphabetical"),           # c("alphabetical", "group", "all")
col.cluster    = c("all"),           # c("alphabetical", "group", "all")
discrete_panel = TRUE,
log.transform  = TRUE,
scale          = TRUE,
border_color   = "white",
bar_width      = NA,              # NA , 5
bar_height     = 1,              # NA , 5
width          = 11,               # NA
height         = 8.5,               # NA
matrix_color   = "rdbu",          # c("vrds", "rdbu")
expr_legend    = TRUE,  # set FALSE if it overlaps with annotation legends
file_format    = "tiff")
plot_heatmap(normalized_counts, metadata_column, metadata_row, heatmap_params,
plot_genes, disp_genes, "TCGA.Stage", output_path)
heatmap_params <- list(anno.row       = c("Class"),        # NULL, c("Group")
anno.column    = c("ajcc_pathologic_stage"),
row.split      = c("Class"),
col.split      = NA, #c("ajcc_pathologic_stage"),
row.cluster    = c("alphabetical"),           # c("alphabetical", "group", "all")
col.cluster    = c("all"),           # c("alphabetical", "group", "all")
discrete_panel = TRUE,
log.transform  = TRUE,
scale          = TRUE,
border_color   = "white",
bar_width      = NA,              # NA , 5
bar_height     = NA,              # NA , 5
width          = 11,               # NA
height         = 8.5,               # NA
matrix_color   = "rdbu",          # c("vrds", "rdbu")
expr_legend    = TRUE,  # set FALSE if it overlaps with annotation legends
file_format    = "tiff")
plot_heatmap(normalized_counts, metadata_column, metadata_row, heatmap_params,
plot_genes, disp_genes, "TCGA.Stage", output_path)
heatmap_params <- list(anno.row       = c("Class"),        # NULL, c("Group")
anno.column    = c("ajcc_pathologic_stage"),
row.split      = c("Class"),
col.split      = NA, #c("ajcc_pathologic_stage"),
row.cluster    = c("alphabetical"),           # c("alphabetical", "group", "all")
col.cluster    = c("all"),           # c("alphabetical", "group", "all")
discrete_panel = TRUE,
log.transform  = TRUE,
scale          = TRUE,
border_color   = "white",
bar_width      = NA,              # NA , 5
bar_height     = NA,              # NA , 5
width          = 7,               # NA
height         = 7,               # NA
matrix_color   = "rdbu",          # c("vrds", "rdbu")
expr_legend    = TRUE,  # set FALSE if it overlaps with annotation legends
file_format    = "tiff")
plot_heatmap(normalized_counts, metadata_column, metadata_row, heatmap_params,
plot_genes, disp_genes, "TCGA.Stage", output_path)
######Reviewer 4 stage adjusted survival curves
source("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
p <- "cam_genes"
plot_genes <- get(p)
source("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
output_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Desktop/"
parent_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/FromBox/Dr.Chao project/"
survival_params <- list(plot_by             = c(NA),
split_by            = c("ajcc_pathologic_stage"),
split_plot          = TRUE,
multiple_cutoff     = TRUE,
stratify_criteria   = c("o"),
reference           = c("LOW"),
conf_interval       = FALSE,
plot_curve          = TRUE,
plot_risk_table     = TRUE,
legend_title        = "Expression",
legend_label        = c("High", "Low"),
color_palette       = c("#d73027","#0c2c84"),
plot_all_bins       = FALSE,
plot_all_quartiles  = FALSE,
gene_sig_score      = TRUE)
meta_data <- openxlsx::read.xlsx(paste0(parent_path,"!TCGA_BLCA_Metadata.xlsx"))
read_data <- read.xlsx(paste0(parent_path, "!TCGA_BLCA_Normalized_Counts.xlsx"))
read_data <- read_data[, -c(2,3,4)]
# Reformat metadata
meta_data <- meta_data %>%
dplyr::mutate(Sample_ID = make.names(names = Sample_ID)) %>%
dplyr::mutate(Time = as.numeric(Time)) %>%
dplyr::filter(Time > 0 & !is.na(Time)) %>%
dplyr::distinct_at("Sample_ID", .keep_all = TRUE)
meta_data <- meta_data %>%
dplyr::mutate(Sample_ID = make.names(names = Sample_id)) %>%
dplyr::mutate(Time = as.numeric(Time)) %>%
dplyr::filter(Time > 0 & !is.na(Time)) %>%
dplyr::distinct_at("Sample_ID", .keep_all = TRUE)
norm_counts <- read_data %>%
dplyr::mutate(SYMBOL = make.names(names = SYMBOL, unique = TRUE)) %>%
dplyr::distinct_at("SYMBOL", .keep_all = TRUE) %>%
tibble::column_to_rownames(var = "SYMBOL") %>%
dplyr::mutate(across(.cols = everything(), .fns = as.numeric))
colnames(norm_counts) <- base::make.names(names = colnames(norm_counts))
norm_counts <- norm_counts[,intersect(make.names(meta_data$Sample_ID), colnames(norm_counts))]
norm_counts <- norm_counts[!rowSums(norm_counts, na.rm=TRUE) == 0,]
og_norm_counts <- log(1+norm_counts, base=2)
t <- base::apply(X=log_norm_counts, MARGIN=1, FUN=median, na.rm=TRUE)
log_norm_counts <- log(1+norm_counts, base=2)
t <- base::apply(X=log_norm_counts, MARGIN=1, FUN=median, na.rm=TRUE)
log_norm_counts <- base::sweep(x=log_norm_counts, MARGIN=1, FUN="-", STATS=t)
p
p <- "cam_genes"
plot_genes <- get(p)
# Create gene lists for CAM, Scaffold, CAM_scaffold
c3_genes <- c("CADM2", "CDH12", "CNTNAP2", "CSMD1", "CSMD3", "CTNNA2", "CTNNA3",
"DLG2", "DMD", "DPP10", "EYS", "GRID2", "LINGO1", "NRG1", "PCDH15",
"PTPRD", "RASGEF1B", "RBFOX1", "SLC26A3", "TMEM132D")
scaffold_genes <- c("DLG2", "DLG4", "HOMER1", "HOMER2", "HOMER3", "SHANK1",
"SHANK2", "SHANK3")
cam_genes <- c("CDH2", "CDH12", "LRFN1", "DAG1", "NLGN1", "NLGN2", "NLGN3",
"LRRTM1", "LRRTM2", "ADGRL2", "ADGRL3", "EPHB2", "EPHB3",
"ADGRB1", "ADGRB3") #"NRXN1", "NRXN2", "NRXN3",
plot_genes <- get(p)
# Generate expr_df
expr_df <- prep_expr_df(log_norm_counts, meta_data, plot_genes, survival_params)
View(expr_df)
stats <- list("gene" = c(),
"group" = c(),
"lower_cutoff" = c(),
"middle_cutoff" = c(),
"upper_cutoff" = c(),
"HR" = c(),
"CI_lower" = c(),
"CI_upper" = c(),
"logrank" = c(),
"reg_logrank.late" = c(),
"Gehan_Breslow.early" = c(),
"Tarone_Ware.early"  = c(),
"Peto_Peto.early" = c(),
"modified_Peto_Peto"  = c(),
"Fleming_Harrington" = c())
# Create a dataframe to classification info
classification_df <- expr_df %>%
dplyr::select(Sample_ID) %>%
dplyr::mutate(Dummy_col = 0)
survival_params$gene_sig_score == TRUE
gene <- "combined.exp"
prefix <- p
plot_survival(expr_df, gene, survival_params, prefix, output_path)
survival_data <- data.frame(model = " ")
# Create a list to store results of calculate_cutoffs, surv_plot et
stats <- list("gene" = c(),
"group" = c(),
"lower_cutoff" = c(),
"middle_cutoff" = c(),
"upper_cutoff" = c(),
"HR" = c(),
"CI_lower" = c(),
"CI_upper" = c(),
"logrank" = c(),
"reg_logrank.late" = c(),
"Gehan_Breslow.early" = c(),
"Tarone_Ware.early" = c(),
"Peto_Peto.early" = c(),
"modified_Peto_Peto" = c(),
"Fleming_Harrington" = c())
survival_params$multiple_cutoff == TRUE
!is.na(survival_params$split_by)
groups <- expr_df %>%
dplyr::select(all_of(survival_params$split_by)) %>%
unlist(use.names=FALSE) %>%
unique()
groups
expr_df %>%
dplyr::select(all_of(survival_params$split_by))
expr_df %>%
dplyr::select(all_of(survival_params$split_by)) %>%
dplyr::add_count(survival_params$split_by)
expr_df %>%
dplyr::select(all_of(survival_params$split_by)) %>%
dplyr::add_count(get(survival_params$split_by))
expr_df %>% dplyr::count(survival_params$split_by)
expr_df %>% dplyr::count(get(survival_params$split_by))
groups <- expr_df %>%
dplyr::select(all_of(survival_params$split_by)) %>%
dplyr::add_count(get(survival_params$split_by)) %>%
dplyr::filter(n>2) %>%
unlist(use.names=FALSE) %>%
unique()
groups
groups <- expr_df %>%
dplyr::add_count(get(survival_params$split_by)) %>%
dplyr::filter(n>2) %>%
dplyr::select(all_of(survival_params$split_by)) %>%
unlist(use.names=FALSE) %>%
unique()
groups
group
group <- groups[1]
group
survival_params$multiple_cutoff == TRUE
!is.na(survival_params$split_by
)
df <- expr_df %>% dplyr::filter(get(survival_params$split_by) == group)
mat <- calc_cutoffs(df, gene, group, survival_params)
##### Save the data from output of calculate_cutoffs()
survival_data       <- dplyr::bind_rows(survival_data, mat[[1]])
stats$gene          <- c(stats$gene,          mat[[2]]$gene)
stats$group         <- c(stats$group,         mat[[2]]$group)
stats$lower_cutoff  <- c(stats$lower_cutoff,  mat[[2]]$lower)
stats$middle_cutoff <- c(stats$middle_cutoff, mat[[2]]$middle)
stats$upper_cutoff  <- c(stats$upper_cutoff,  mat[[2]]$upper)
View(survival_data)
!is.na(survival_params$split_by)
survival_data <- survival_data %>%
dplyr::mutate(model = paste0(Expression, "_", get(survival_params$split_by))) %>%
dplyr::filter(!is.na(Sample_ID))
survival_params$split_plot == TRUE
!is.na(survival_params$split_by)
df <- survival_data %>% dplyr::filter(get(survival_params$split_by) == group)
View(df)
cox_stats <- calc_surv_stats(df, group, prefix, output_path)
source("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
output_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Desktop/"
parent_path <- "C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/FromBox/Dr.Chao project/"
survival_params <- list(plot_by             = c(NA),
split_by            = c("ajcc_pathologic_stage"),
split_plot          = TRUE,
multiple_cutoff     = TRUE,
stratify_criteria   = c("o"),
reference           = c("LOW"),
conf_interval       = FALSE,
plot_curve          = TRUE,
plot_risk_table     = TRUE,
legend_title        = "Expression",
legend_label        = c("High", "Low"),
color_palette       = c("#d73027","#0c2c84"),
plot_all_bins       = FALSE,
plot_all_quartiles  = FALSE,
gene_sig_score      = TRUE)
meta_data <- openxlsx::read.xlsx(paste0(parent_path,"!TCGA_BLCA_Metadata.xlsx"))
read_data <- read.xlsx(paste0(parent_path, "!TCGA_BLCA_Normalized_Counts.xlsx"))
read_data <- read_data[, -c(2,3,4)]
# Reformat metadata
meta_data <- meta_data %>%
dplyr::mutate(Sample_ID = make.names(names = Sample_id)) %>%
dplyr::mutate(Time = as.numeric(Time)) %>%
dplyr::filter(Time > 0 & !is.na(Time)) %>%
dplyr::distinct_at("Sample_ID", .keep_all = TRUE)
# Reformat read data
norm_counts <- read_data %>%
dplyr::mutate(SYMBOL = make.names(names = SYMBOL, unique = TRUE)) %>%
dplyr::distinct_at("SYMBOL", .keep_all = TRUE) %>%
tibble::column_to_rownames(var = "SYMBOL") %>%
dplyr::mutate(across(.cols = everything(), .fns = as.numeric))
colnames(norm_counts) <- base::make.names(names = colnames(norm_counts))
norm_counts <- norm_counts[,intersect(make.names(meta_data$Sample_ID), colnames(norm_counts))]
norm_counts <- norm_counts[!rowSums(norm_counts, na.rm=TRUE) == 0,]
log_norm_counts <- log(1+norm_counts, base=2)
t <- base::apply(X=log_norm_counts, MARGIN=1, FUN=median, na.rm=TRUE)
log_norm_counts <- base::sweep(x=log_norm_counts, MARGIN=1, FUN="-", STATS=t)
for (p in c("cam_genes", "scaffold_genes", "combo")){
plot_genes <- get(p)
# Generate expr_df
expr_df <- prep_expr_df(log_norm_counts, meta_data, plot_genes, survival_params)
# Create a list to store survminer cutoffs, coxph stats, etc..
stats <- list("gene" = c(),
"group" = c(),
"lower_cutoff" = c(),
"middle_cutoff" = c(),
"upper_cutoff" = c(),
"HR" = c(),
"CI_lower" = c(),
"CI_upper" = c(),
"logrank" = c(),
"reg_logrank.late" = c(),
"Gehan_Breslow.early" = c(),
"Tarone_Ware.early"  = c(),
"Peto_Peto.early" = c(),
"modified_Peto_Peto"  = c(),
"Fleming_Harrington" = c())
# Create a dataframe to classification info
classification_df <- expr_df %>%
dplyr::select(Sample_ID) %>%
dplyr::mutate(Dummy_col = 0)
if (survival_params$gene_sig_score == TRUE){
gene <- "combined.exp"
prefix <- p
plot_survival(expr_df, gene, survival_params, prefix, output_path)
}
}
# Create gene lists for CAM, Scaffold, CAM_scaffold
c3_genes <- c("CADM2", "CDH12", "CNTNAP2", "CSMD1", "CSMD3", "CTNNA2", "CTNNA3",
"DLG2", "DMD", "DPP10", "EYS", "GRID2", "LINGO1", "NRG1", "PCDH15",
"PTPRD", "RASGEF1B", "RBFOX1", "SLC26A3", "TMEM132D")
scaffold_genes <- c("DLG2", "DLG4", "HOMER1", "HOMER2", "HOMER3", "SHANK1",
"SHANK2", "SHANK3")
cam_genes <- c("CDH2", "CDH12", "LRFN1", "DAG1", "NLGN1", "NLGN2", "NLGN3",
"LRRTM1", "LRRTM2", "ADGRL2", "ADGRL3", "EPHB2", "EPHB3",
"ADGRB1", "ADGRB3") #"NRXN1", "NRXN2", "NRXN3",
cam_scaffold_genes <- c(cam_genes, scaffold_genes)
for (p in c("cam_genes", "scaffold_genes", "combo")){
plot_genes <- get(p)
# Generate expr_df
expr_df <- prep_expr_df(log_norm_counts, meta_data, plot_genes, survival_params)
# Create a list to store survminer cutoffs, coxph stats, etc..
stats <- list("gene" = c(),
"group" = c(),
"lower_cutoff" = c(),
"middle_cutoff" = c(),
"upper_cutoff" = c(),
"HR" = c(),
"CI_lower" = c(),
"CI_upper" = c(),
"logrank" = c(),
"reg_logrank.late" = c(),
"Gehan_Breslow.early" = c(),
"Tarone_Ware.early"  = c(),
"Peto_Peto.early" = c(),
"modified_Peto_Peto"  = c(),
"Fleming_Harrington" = c())
# Create a dataframe to classification info
classification_df <- expr_df %>%
dplyr::select(Sample_ID) %>%
dplyr::mutate(Dummy_col = 0)
if (survival_params$gene_sig_score == TRUE){
gene <- "combined.exp"
prefix <- p
plot_survival(expr_df, gene, survival_params, prefix, output_path)
}
}
combo <- cam_scaffold_genes
for (p in c("cam_genes", "scaffold_genes", "combo")){
plot_genes <- get(p)
# Generate expr_df
expr_df <- prep_expr_df(log_norm_counts, meta_data, plot_genes, survival_params)
# Create a list to store survminer cutoffs, coxph stats, etc..
stats <- list("gene" = c(),
"group" = c(),
"lower_cutoff" = c(),
"middle_cutoff" = c(),
"upper_cutoff" = c(),
"HR" = c(),
"CI_lower" = c(),
"CI_upper" = c(),
"logrank" = c(),
"reg_logrank.late" = c(),
"Gehan_Breslow.early" = c(),
"Tarone_Ware.early"  = c(),
"Peto_Peto.early" = c(),
"modified_Peto_Peto"  = c(),
"Fleming_Harrington" = c())
# Create a dataframe to classification info
classification_df <- expr_df %>%
dplyr::select(Sample_ID) %>%
dplyr::mutate(Dummy_col = 0)
if (survival_params$gene_sig_score == TRUE){
gene <- "combined.exp"
prefix <- p
plot_survival(expr_df, gene, survival_params, prefix, output_path)
}
}
