} else if (min(mat) == 0){
breaks <- c(seq(from = 0, to = ceiling(max(mat)), length.out = 100))
my_palette <- my_palette[50:100]
} else if(min(mat) < -3 | max(mat) > 3){
breaks <- c(seq(-3, 0, length.out = 50), seq(3/100, 3, length.out = 50))
} else{
breaks <- c(seq(from = floor(min(mat)), to = 0, length.out = 50), seq(from = max(mat)/100, to = ceiling(max(mat)), length.out = 50))
}
!gtools::invalid(heatmap_params$col.split)
gaps_col <- col_annotation %>%
dplyr::count(get(heatmap_params$col.split)) %>%
dplyr::mutate(n = cumsum(n)) %>%
dplyr::select(n) %>%
unlist(use.names = FALSE)
gaps_col <- gaps_col[gaps_col < ncol(mat)]
gaps_col
metadata_column %>% dplyr::count(gsva)
metadata_column %>% dplyr::count(gsva.class)
!gtools::invalid(heatmap_params$row.split)
# Define gaps for columns
if (!gtools::invalid(heatmap_params$col.split)){
gaps_col <- col_annotation %>%
dplyr::count(get(heatmap_params$col.split)) %>%
dplyr::mutate(n = cumsum(n)) %>%
dplyr::select(n) %>%
unlist(use.names = FALSE)
gaps_col <- gaps_col[gaps_col < ncol(mat)]
} else {
gaps_col <- NULL
}
# Define gaps for rows
if (!gtools::invalid(heatmap_params$row.split)){
gaps_row <- row_annotation %>%
dplyr::count(get(heatmap_params$row.split)) %>%
dplyr::mutate(n = cumsum(n)) %>%
dplyr::select(n) %>%
unlist(use.names = FALSE)
gaps_row <- gaps_row[gaps_row < nrow(mat)]
} else {
gaps_row <- NULL
}
gaps_row
gaps_col
!gtools::invalid(heatmap_params$row.split)
gtools::invalid(heatmap_params$row.split)
heatmap_params$row.cluster == "alphabetical"
heatmap_params$row.cluster == "group"
heatmap_params$row.cluster == "all"
rowclust <- hclust(dist(mat))
row_order <- rownames(mat[rowclust$order,])
row_order
!gtools::invalid(heatmap_params$col.split)
col_elements <- col_annotation %>%
dplyr::select(all_of(heatmap_params$col.split)) %>%
unique() %>%
unlist(use.names=FALSE) %>%
sort()
col_elements
col_order <- c()
for (g in col_elements){
items <- rownames(col_annotation)[which(col_annotation %>% dplyr::select(all_of(heatmap_params$col.split)) == g)]
temp_mat <- mat[,items]
if (heatmap_params$col.cluster == "group" & length(items) > 1){
colclust <- hclust(dist(t(temp_mat)))
col_order <- c(col_order, colnames(temp_mat[,colclust$order]))
} else if(heatmap_params$col.cluster == "group" & length(items) == 1){
col_order <- c(col_order, items)
} else if (heatmap_params$col.cluster == "alphabetical"){
col_order <- c(col_order, sort(colnames(temp_mat)))
} else if (heatmap_params$col.cluster == "all"){
col_order <- c(col_order, colnames(temp_mat))
cat("No col clustering performed. col.split will be affected by col.cluster")
} else {
cat("col.cluster must be either 'group', 'all' or 'alphabetical'")
}
}
g <- col_elements[1]
items <- rownames(col_annotation)[which(col_annotation %>% dplyr::select(all_of(heatmap_params$col.split)) == g)]
temp_mat <- mat[,items]
rownames(col_annotation)[which(col_annotation %>% dplyr::select(all_of(heatmap_params$col.split)) == g)]
View(mat)
colnames(mat) <- make.names(colnames(mat))
mat <- norm_counts %>%
# Keep only genes that need to be plotted
dplyr::filter(str_to_upper(SYMBOL) %in% str_to_upper(plot_genes)) %>%
# Replace NA with 0
base::replace(is.na(.), 0) %>%
# If there are duplicated genes, keep only row for highest expressing copy
dplyr::mutate(n = rowSums(.[,-1])) %>%
dplyr::group_by(SYMBOL) %>%
dplyr::slice_max(n) %>%
dplyr::ungroup() %>%
# Remove genes with 0 expression in all samples
dplyr::filter(n != 0) %>%
dplyr::select(everything(), -n) %>%
# Move gene names to rownames
tibble::remove_rownames() %>%
tibble::column_to_rownames("SYMBOL") %>%
# Make sure all columns are numeric
dplyr::mutate(across(.cols = everything(), .fns = as.numeric))
# mat[, unlist(lapply(mat, is.numeric))]    #alternative to mutate(across())
# Make rownames proper
rownames(mat) <- make.names(rownames(mat))
colnames(mat) <- make.names(colnames(mat))
# Perform log transform if needed. Count data is usually skewed right or left.
# So, it will mostly be red or blue. log transform to make it less skewed.
if (heatmap_params$log.transform == TRUE){
mat <- log(1+mat, base = 2)
}
# CUrrently, in mat genes are in rows and samples are in columns.
# We need to scale each gene (in rows) across samples (in columns)
# However, scale() can ONLY perform scaling within each column.
# So, we transpose the dataframe first, so that genes are in columns & samples
# are in rows & then perform scaling.
if (heatmap_params$scale == TRUE){
mat <- mat %>% t() %>% scale() %>% t()
}
# After scaling, NA values could have been introduced. So, replace NA with 0
mat[is.na(mat)] <- 0
# Keep ONLY samples common in metadata_column and mat
metadata_column <- metadata_column %>%
dplyr::filter(make.names(Sample_ID) %in% make.names(colnames(mat)))
# Arrange samples in mat in the same order as in metadata_column.
# NOTE: This is important because in the next step we assign rownames to
# col_annotation assuming identical sample order between metadata_column & mat
#mat <- mat[,metadata_column[,columns]]
#****************************************************************************#
# Define column and row annotations
#****************************************************************************#
# Define column annotation for samples
if(length(heatmap_params$anno.column) > 0){
col_annotation <- metadata_column %>%
dplyr::select(Sample_ID, all_of(heatmap_params$anno.column)) %>%
tibble::column_to_rownames("Sample_ID")
rownames(col_annotation) <- make.names(rownames(col_annotation))
} else {
col_annotation <- NA
}
#gtools::invalid(heatmap_params$anno.column))
# Define row annotation for genes
if(length(heatmap_params$anno.row) > 0){
row_annotation <- metadata_row %>%
dplyr::select(SYMBOL, all_of(heatmap_params$anno.row)) %>%
dplyr::mutate(SYMBOL = make.names(SYMBOL, unique=TRUE)) %>%
tibble::column_to_rownames("SYMBOL") %>%
data.frame()
rownames(row_annotation) <- make.names(rownames(row_annotation))
} else {
# If you define as NA, etc, it will count as 1 variable during annotation_colors calculation
row_annotation <- NULL
}
#****************************************************************************#
# Define colors for column and row annotation
#****************************************************************************#
# NOTE: There is ONLY 1 parameter in pheatmap() i.e. annotation_colors to
# define colors for both row and column annotations
# The colors should be specified in the following format:
# $Sample
# FB1       FB2       FB3       FB4       FB5        FC       MB1
# "#BF812D" "#35978F" "#C51B7D" "#7FBC41" "#762A83" "#E08214" "#542788"
# $Sex
# Female      Male
# "#9E0142" "#E41A1C"
# This is an example of how this needs to be specified
# ann_colors = list(Column_Groups = c(`Immune Depleted` = "#CB181D", `Immune Enriched` = "#A6D854"),
#                    Row_Groups = c(`Pro-tumor Immune infiltrate` = "white", `Anti-tumor Immune infiltrate` = "white"))
ann_colors <- list()
colors <- c("#BF812D", "#35978F", "#C51B7D", "#7FBC41", "#762A83",
"#E08214", "#542788", "#D6604D", "#4393C3", "#878787",
"#E41A1C", "#F781BF", "#4DAF4A", "#FFFFBF", "#377EB8",
"#984EA3", "#FF7F00", "#FFFF33", "#A65628", "#999999",
"#66C2A5", "#FC8D62", "#000000", "#9E0142", "#1A1A1A",
"#74006F", "#FFC606", "#F6D2E0", "#C8E7F5")
# Convert col_annotation and row_annotation to list for easier analysis
col_list <- base::lapply(X = as.list(col_annotation), FUN = unique)
row_list <- base::lapply(X = as.list(row_annotation), FUN = unique)
ann_list <- c(col_list, row_list)
# Define total number of variables to be colored in row and column annotation
ann_total <- length(ann_list)
# Go through each variable and specify colors for each element within variable
if (ann_total > 1){
for (i in 1:ann_total){
elements <- ann_list[[i]]
palette_n <- length(elements)
if (palette_n > 1){
# Create a vector of transparency values.
alphas <- base::seq(from=0, to=1, by=1/palette_n)
# Remove alpha=0 as it is always white
alphas <- base::setdiff(alphas, 0)
# Create a color palette with different transparencies
palette_colors <- colorspace::adjust_transparency(col = colors[i], alpha = alphas[1])
for (n in 2:palette_n){
palette_colors <- c(palette_colors,
colorspace::adjust_transparency(col = colors[i], alpha = alphas[n]))
}
} else{
palette_colors <- colorspace::adjust_transparency(col = colors[i], alpha = alphas[1])
}
# Sort the elements within each variable
names(palette_colors) <- sort(elements)
# Merge all annotation colors
ann_colors <- c(ann_colors, list(palette_colors))
}
# Specify variable names to annotation colors
names(ann_colors) <- names(ann_list)
} else if (ann_total == 1){
elements <- ann_list[[1]]
palette_n <- length(elements)
palette_colors <- colors[1:palette_n]
names(palette_colors) <- sort(elements)
ann_colors <- c(ann_colors, list(palette_colors))
names(ann_colors) <- names(ann_list)
} else {
cat("There are no row or column annotations")
}
#ann_colors_col$Score[[1]] <- "#0c2c84"
#ann_colors_col$Score[[2]] <- "#d73027"
#****************************************************************************#
# Define colors for heatmap
#****************************************************************************#
vrds <- viridis_pal()(100)
rdbu <- colorRampPalette(rev(brewer.pal(n = 11, name = "RdBu")))(100)
#****************************************************************************#
# Determine breaks for heatmap color scale
#****************************************************************************#
# NOTE: breaks correspond to numerical ranges for color palette's bins
# i.e. 0 to length(my_palette)
# Define breaks
if(max(mat) == 0){
breaks <- c(seq(from = floor(min(mat)), to = 0, length.out = 100))
my_palette <- my_palette[1:50]
} else if (min(mat) == 0){
breaks <- c(seq(from = 0, to = ceiling(max(mat)), length.out = 100))
my_palette <- my_palette[50:100]
} else if(min(mat) < -3 | max(mat) > 3){
breaks <- c(seq(-3, 0, length.out = 50), seq(3/100, 3, length.out = 50))
} else{
breaks <- c(seq(from = floor(min(mat)), to = 0, length.out = 50), seq(from = max(mat)/100, to = ceiling(max(mat)), length.out = 50))
}
#****************************************************************************#
# Define vectors indicating positions where you want to have gaps in heatmap #
#****************************************************************************#
# NOTE: count() automatically arranges by alphabetical order. So,
# Define gaps for columns
if (!gtools::invalid(heatmap_params$col.split)){
gaps_col <- col_annotation %>%
dplyr::count(get(heatmap_params$col.split)) %>%
dplyr::mutate(n = cumsum(n)) %>%
dplyr::select(n) %>%
unlist(use.names = FALSE)
gaps_col <- gaps_col[gaps_col < ncol(mat)]
} else {
gaps_col <- NULL
}
# Define gaps for rows
if (!gtools::invalid(heatmap_params$row.split)){
gaps_row <- row_annotation %>%
dplyr::count(get(heatmap_params$row.split)) %>%
dplyr::mutate(n = cumsum(n)) %>%
dplyr::select(n) %>%
unlist(use.names = FALSE)
gaps_row <- gaps_row[gaps_row < nrow(mat)]
} else {
gaps_row <- NULL
}
#   # Count() automatically arranges by alphabetical order unfortunately
#   # So, we do this manually.
#   element_names <- c()
#   element_counts <- c()
#   c <- 0
#   for (i in 1:nrow(col_annotation)){
#     if (!(col_annotation[,gap_columns][i] %in% element_names)){
#       element_names <- c(element_names, col_annotation[,gap_columns][i])
#       element_counts <- c(element_counts, c)
#       c <- 1
#     } else{
#       c <- c+1
#     }
#   }
#   element_counts <- c(element_counts,c)
#****************************************************************************#
# Define how samples will be clustered in heatmap
#****************************************************************************#
if (!gtools::invalid(heatmap_params$row.split)){
# Important to sort so row_elements is similar to gaps_row <- row_annotation %>% dplyr::count(get(heatmap_params$anno.row[1])) %>% dplyr::mutate(n = cumsum(n))
# Else gaps will be wrong sometimes
row_elements <- row_annotation %>%
dplyr::select(all_of(heatmap_params$row.split)) %>%
unique() %>%
unlist(use.names=FALSE) %>%
sort()
row_order <- c()
for (g in row_elements){
items <- rownames(row_annotation)[which(row_annotation %>% dplyr::select(all_of(heatmap_params$row.split)) == g)]
temp_mat <- mat[items,]
if (heatmap_params$row.cluster == "group" & length(items) > 1){
rowclust <- hclust(dist(temp_mat))
row_order <- c(row_order, rownames(temp_mat[rowclust$order,]))
} else if(heatmap_params$row.cluster == "group" & length(items) == 1){
row_order <- c(row_order, items)
}else if (heatmap_params$row.cluster == "alphabetical"){
row_order <- c(row_order, sort(rownames(temp_mat)))
} else if (heatmap_params$row.cluster == "all"){
row_order <- c(row_order, rownames(temp_mat))
cat("No row clustering performed. row.split will be affected by row.cluster")
} else {
cat("row.cluster must be either 'group', 'all' or 'alphabetical'")
}
}
} else if (gtools::invalid(heatmap_params$row.split)){
if (heatmap_params$row.cluster == "alphabetical"){
row_order <- sort(rownames(mat))
} else if (heatmap_params$row.cluster == "all"){
rowclust <- hclust(dist(mat))
row_order <- rownames(mat[rowclust$order,])
} else if (heatmap_params$row.cluster == "group"){
# Important to sort so row_elements is similar to gaps_row <- row_annotation %>% dplyr::count(get(heatmap_params$anno.row[1])) %>% dplyr::mutate(n = cumsum(n))
# Else gaps will be wrong sometimes
row_elements <- row_annotation %>%
dplyr::select(all_of(heatmap_params$anno.row[1])) %>%
unique() %>%
unlist(use.names=FALSE) %>%
sort()
row_order <- c()
for (g in row_elements){
items <- rownames(row_annotation)[which(row_annotation %>% dplyr::select(all_of(heatmap_params$anno.row[1])) == g)]
temp_mat <- mat[items,]
rowclust <- hclust(dist(temp_mat))
row_order <- c(row_order, rownames(temp_mat[rowclust$order,]))
}
} else {
cat("row.cluster must be either 'group', 'all' or 'alphabetical'")
}
}
if (!gtools::invalid(heatmap_params$col.split)){
# Important to sort so col_elements is similar to gaps_col <- col_annotation %>% dplyr::count(get(heatmap_params$anno.column[1])) %>% dplyr::mutate(n = cumsum(n))
# Else gaps will be wrong sometimes
col_elements <- col_annotation %>%
dplyr::select(all_of(heatmap_params$col.split)) %>%
unique() %>%
unlist(use.names=FALSE) %>%
sort()
col_order <- c()
for (g in col_elements){
items <- rownames(col_annotation)[which(col_annotation %>% dplyr::select(all_of(heatmap_params$col.split)) == g)]
temp_mat <- mat[,items]
if (heatmap_params$col.cluster == "group" & length(items) > 1){
colclust <- hclust(dist(t(temp_mat)))
col_order <- c(col_order, colnames(temp_mat[,colclust$order]))
} else if(heatmap_params$col.cluster == "group" & length(items) == 1){
col_order <- c(col_order, items)
} else if (heatmap_params$col.cluster == "alphabetical"){
col_order <- c(col_order, sort(colnames(temp_mat)))
} else if (heatmap_params$col.cluster == "all"){
col_order <- c(col_order, colnames(temp_mat))
cat("No col clustering performed. col.split will be affected by col.cluster")
} else {
cat("col.cluster must be either 'group', 'all' or 'alphabetical'")
}
}
} else if (gtools::invalid(heatmap_params$col.split)){
if (heatmap_params$col.cluster == "alphabetical"){
col_order <- sort(colnames(mat))
} else  if(heatmap_params$col.cluster == "all"){
colclust <- hclust(dist(t(mat)))
col_order <- colnames(mat[,colclust$order])
} else if (heatmap_params$col.cluster == "group"){
# Important to sort so col_elements is similar to gaps_col <- col_annotation %>% dplyr::count(get(heatmap_params$anno.column[1])) %>% dplyr::mutate(n = cumsum(n))
# Else gaps will be wrong sometimes
col_elements <- col_annotation %>%
dplyr::select(all_of(heatmap_params$anno.col[1])) %>%
unique() %>%
unlist(use.names=FALSE) %>%
sort()
col_order <- c()
for (g in col_elements){
items <- rownames(col_annotation)[which(col_annotation %>% dplyr::select(all_of(heatmap_params$anno.col[1])) == g)]
temp_mat <- mat[,items]
colclust <- hclust(dist(t(temp_mat)))
col_order <- c(col_order, colnames(temp_mat[,colclust$order]))
}
} else{
cat("col.cluster must be either 'group', 'all' or 'alphabetical'")
}
}
# Arrange the rows and columns
reordered <- mat[row_order, col_order]
display_col <- colnames(reordered)
display_row <- data.frame("gene" = rownames(reordered)) %>%
dplyr::mutate(gene = dplyr::case_when(gene %in% disp_genes ~ gene,
TRUE ~ "")) %>%
unlist(use.names=FALSE)
if (ncol(reordered) > 500){
# Save the clustered scores in xlsx
wb <- openxlsx::createWorkbook()
openxlsx::addWorksheet(wb, sheetName = "Heatmap_matrix")
openxlsx::writeData(wb, sheet = "Heatmap_matrix", x = t(reordered), rowNames = TRUE)
openxlsx::saveWorkbook(wb, file = paste0(output_path, "Heatmap_matrix_", file_suffix, ".xlsx"),
overwrite = TRUE)
} else{
# Save the clustered scores in xlsx
wb <- openxlsx::createWorkbook()
openxlsx::addWorksheet(wb, sheetName = "Heatmap_matrix")
openxlsx::writeData(wb, sheet = "Heatmap_matrix", x = reordered, rowNames = TRUE)
openxlsx::saveWorkbook(wb, file = paste0(output_path, "Heatmap_matrix_", file_suffix, ".xlsx"),
overwrite = TRUE)
}
pheatmap::pheatmap(mat                      = as.matrix(reordered),
color                    = get(heatmap_params$matrix_color),
breaks                   = breaks,
border_color             = heatmap_params$border_color,
cellwidth                = heatmap_params$bar_width,
cellheight               = heatmap_params$bar_height,
scale                    = "none",
cluster_rows             = FALSE,
cluster_cols             = FALSE,,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method        = "complete",
legend                   = heatmap_params$expr_legend,  # set FALSE if it overlaps with annotation legends
legend_breaks            = NA,
legend_labels            = NA,
annotation_row           = row_annotation,
annotation_col           = col_annotation,
annotation_colors        = ann_colors,
annotation_legend        = TRUE,
annotation_names_row     = FALSE,
annotation_names_col     = FALSE, # set to TRUE if more than 1
show_rownames            = dplyr::if_else(length(disp_genes) < 80, TRUE, FALSE, missing = NULL),
show_colnames            = dplyr::if_else(length(unique(display_col)) < 50, TRUE, FALSE, missing = NULL),
fontsize                 = 5,
fontsize_row             = 5,
fontsize_col             = 5,
gaps_row                 = gaps_row,
gaps_col                 = gaps_col,
angle_col                = "45",
fontsize_number          = 0.8*fontsize,
labels_row               = display_row,
labels_col               = display_col,
width                    = heatmap_params$width,
#height                   = heatmap_params$height,
filename                 = paste0(output_path, "Heatmap_", file_suffix, ".", heatmap_params$file_format))
source("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
# Heatmap parameters
plot_genes <- main_df$SYMBOL
disp_genes <- c()
file_suffix <- ""
output_path <- data_path
heatmap_params <- list(anno.row       = NULL,        # NULL, c("Group")
anno.column    = c("gsva.class"),
row.split      = NA,
col.split      = c("gsva.class"),
row.cluster    = c("all"),           # c("alphabetical", "group", "all")
col.cluster    = c("group"),  # c("alphabetical", "group", "all")
log.transform  = TRUE,
scale          = TRUE,
border_color   = "white",
bar_width      = NA,              # NA , 5
bar_height     = NA,              # NA , 5
width          = 5,              # NA
height         = 5,              # NA
matrix_color   = "rdbu",          # c("vrds", "rdbu")
expr_legend    = TRUE,  # set FALSE if it overlaps with annotation legends
file_format    = "tiff")
metadata_column <- metadata_df %>% dplyr::filter(Sex == "Male")
metadata_row <- data.frame(SYMBOL = "")
norm_counts <- main_df %>% dplyr::select(SYMBOL, all_of(metadata_column$Sample_ID))
plot_heatmap(norm_counts, metadata_column, metadata_row, heatmap_params,
plot_genes, disp_genes, file_suffix, output_path)
heatmap_params <- list(anno.row       = NULL,        # NULL, c("Group")
anno.column    = c("gsva.class"),
row.split      = NA,
col.split      = c("gsva.class"),
row.cluster    = c("all"),           # c("alphabetical", "group", "all")
col.cluster    = c("group"),  # c("alphabetical", "group", "all")
log.transform  = TRUE,
scale          = TRUE,
border_color   = "white",
bar_width      = NA,              # NA , 5
bar_height     = NA,              # NA , 5
width          = NA, #5,              # NA
height         = NA, #5,              # NA
matrix_color   = "rdbu",          # c("vrds", "rdbu")
expr_legend    = TRUE,  # set FALSE if it overlaps with annotation legends
file_format    = "tiff")
metadata_column <- metadata_df %>% dplyr::filter(Sex == "Male")
metadata_row <- data.frame(SYMBOL = "")
norm_counts <- main_df %>% dplyr::select(SYMBOL, all_of(metadata_column$Sample_ID))
plot_heatmap(norm_counts, metadata_column, metadata_row, heatmap_params,
plot_genes, disp_genes, file_suffix, output_path)
source("C:/Users/kailasamms/OneDrive - Cedars-Sinai Health System/Documents/GitHub/R-Scripts/RNASeq_DESeq2_Functions.R")
heatmap_params <- list(anno.row       = NULL,        # NULL, c("Group")
anno.column    = c("gsva.class"),
row.split      = NA,
col.split      = c("gsva.class"),
row.cluster    = c("all"),           # c("alphabetical", "group", "all")
col.cluster    = c("group"),  # c("alphabetical", "group", "all")
log.transform  = TRUE,
scale          = TRUE,
border_color   = "white",
bar_width      = NA,              # NA , 5
bar_height     = NA,              # NA , 5
width          = NA, #5,              # NA
height         = NA, #5,              # NA
matrix_color   = "rdbu",          # c("vrds", "rdbu")
expr_legend    = TRUE,  # set FALSE if it overlaps with annotation legends
file_format    = "tiff")
metadata_column <- metadata_df %>% dplyr::filter(Sex == "Male")
metadata_row <- data.frame(SYMBOL = "")
norm_counts <- main_df %>% dplyr::select(SYMBOL, all_of(metadata_column$Sample_ID))
plot_heatmap(norm_counts, metadata_column, metadata_row, heatmap_params,
plot_genes, disp_genes, file_suffix, output_path)
